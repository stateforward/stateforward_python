"""

A module providing a `Future` class that encapsulates the outcome of asynchronous operations and various utility functions.

This module defines a `Future` class which follows a protocol suitable for managing the results of asynchronous computations. It provides methods to check if the future is cancelled, running, or done, to add callbacks for completion, and to retrieve the result or exception of the future. The class also includes the ability to set the result or exception, thereby resolving the future.

In addition, the module offers a `results` method defined as a static method of the `Future` class. This method allows for wrapping both `asyncio.Future` objects and other concurrent.futures.Future into the `Future` type, ensuring compatibility across different types of futures. If a non-future value is passed, it wraps the value inside a new `concurrent.futures.Future` and marks it as done by setting the result.

Type Variables:
    T: The type parameter indicating the type of the result that the future will hold.

Classes:
    Future(typing.Protocol[T]):
        A class that represents the outcome of an asynchronous operation, conforming to a protocol for futures.

        Protocol Members:
            cancel(): Attempts to cancel the future.
            cancelled(): Checks if the future has been cancelled.
            running(): Checks if the future is currently running.
            done(): Checks if the future has completed.
            add_done_callback(callback): Adds a callable to be invoked when the future is done.
            result(timeout=None): Retrieves the result of the future, with an optional timeout.
            exception(timeout=None): Retrieves the exception raised by the future, with an optional timeout.
            set_result(result): Sets the result of the future and marks it as done.
            set_exception(exception): Sets the exception on the future and marks it as done.
            __await__(*args, **kwargs): Defines the behavior of the future when used in an `await` expression.
            results(value): Class method to wrap a given value or another future into a `Future` object.

Functions:
  None.

Attributes:
    remove_done_callback: An optional callable member that if defined, removes a done callback from the future.

Note: Documentation automatically generated by https://undoc.ai
"""
import typing
import asyncio
from concurrent import futures

T = typing.TypeVar("T")
asyncio.Future


class Future(typing.Protocol[T]):
    """
    A protocol defining the interface for a future, which is a placeholder for a result that may not yet be available.
        A future represents an asynchronous operation that produces a result at some point in time. This protocol
        provides the methods for querying the state of the operation, getting the result, adding callbacks,
        and defining the outcome.
        Methods:
            cancel(): Attempt to cancel the operation. Returns True if the operation can be cancelled,
                otherwise False.
            cancelled(): Return True if the future was cancelled, otherwise False.
            running(): Return True if the future is currently executing, otherwise False.
            done(): Return True if the future is done executing and the result/error can be retrieved;
                otherwise False.
            add_done_callback(callback): Add a callable to be invoked when the future is done.
            result(timeout=None): Return the result of the operation. If 'timeout' is provided, it specifies
                the maximum number of seconds to wait for the result. If the operation is not complete
                within the timeout, a TimeoutError is raised.
            exception(timeout=None): Return the exception raised by the operation, if any. Similar to
                'result', it accepts an optional 'timeout' parameter.
            set_result(result): Set the result of the operation. Used internally by executors or event loops.
            set_exception(exception): Set the exception of the operation. Also used internally.
            __await__(*args, **kwargs): Allow the future to be used with the 'await' keyword.
        Class Methods:
            results(value): Coerce a given value into a future. If it is already a future or compatible with one,
                return it as is. Otherwise, wrap the given value in a new future and return it.
        Attributes:
            remove_done_callback: An optional callable to remove a callback from the done callbacks of the future.
        Type Parameters:
            T: The type of the result that the future will hold.
    """
    remove_done_callback: typing.Optional[
        typing.Callable[[typing.Callable[["Future"], None]], None]
    ]

    def cancel(self) -> bool:
        """
        Cancels an ongoing operation or process represented by the object instance calling this method. The method will return a boolean value indicating the success of the cancel operation. It is expected to return True if the cancellation was successful, or False if there was nothing to cancel or if the cancellation failed for any reason. The exact behavior and side-effects are dependent on the specific implementation within the calling object.
        """
        ...

    def cancelled(self) -> bool:
        """
        Checks if this process or operation has been cancelled.
        Returns:
            bool: True if the process has been cancelled, False otherwise.
        """
        ...

    def running(self) -> bool:
        """
        Checks if the current process is running. 
        Returns:
            bool: True if the process is currently running, False otherwise.
        """
        ...

    def done(self) -> bool:
        """
            Checks if a task or process has completed.
            This method evaluates the state of an object to determine if a certain task, operation, or process has finished. Typical usage would be within an object that undergoes a series of steps or stages, and this method will indicate completion. The actual implementation should provide the specific logic to ascertain the completion status.
            Returns:
                bool: True if the task or process is complete, otherwise False.
        """
        ...

    def add_done_callback(self, callback: typing.Callable[["Future"], None]):
        """
        Adds a callback function that will be called when the future instance is done.
            The callback should take a single argument, the future instance which calls the
            callback. This method should be called whenever the future is done and is
            ready to have its result retrieved or its exception handled. The callback
            is executed on the thread that calls this method.
            Args:
                callback (typing.Callable[['Future'], None]): A callable object that accepts
                    a future object as its only argument.
        """
        ...

    def result(self, timeout: typing.Optional[float] = None) -> T:
        """
        Given an optional timeout, this method will return the result of the task when it completes.
        Args:
            timeout (typing.Optional[float], optional): The maximum time to wait for the result. If None,
                the method will block indefinitely until the task completes. Default is None.
        Returns:
            T: The result of the task.
        Raises:
            TimeoutError: If the timeout is exceeded before the task completes.
        """
        ...

    def exception(self, timeout: typing.Optional[float] = None):
        """
        Raises an exception within the current context after an optional timeout period.
        Args:
            timeout (typing.Optional[float], optional): The number of seconds to wait before raising
                the exception. If set to None, the exception is raised immediately. Defaults to None.
        Raises:
            Exception: An unspecific exception triggered by the function after the specified timeout.
        """
        ...

    def set_result(self, result: T):
        """
        Sets the result of an operation or computation to the instance variable.
        Args:
            result (T): The value to be set as the result, where T is a type parameter representing the type of the result.
        """
        ...

    def set_exception(self, exception: Exception):
        """
        Sets the exception for a task or a future instance in case of an error or unexpected behavior during execution. This method updates the task's state and stores the provided exception object for future reference or error handling mechanisms. This is typically called internally within concurrency frameworks when a task is unable to complete successfully due to an exception being raised. Users of the task can then check for the presence of an exception and handle it appropriately. Note that calling this method may have side effects such as notifying waiters or setting callbacks into motion. It's generally not intended to be utilized directly by users of concurrency frameworks unless implementing custom task-like objects or futures.
        Args:
            exception (Exception): The exception object to set for the task or future instance.
        Raises:
            TypeError: If the provided exception is not an instance of Exception.
        """
        ...

    def __await__(self, *args, **kwargs):
        """
        Implements behavior for awaitable objects that will be used when an object is awaited on.
        This method is meant to be used by the Python interpreter and not called directly; awaitables are used with the 'await' keyword. When '__await__' is called as part of the 'await' expression, it should return an iterator which is executed by the interpreter.
        Args:
            *args (tuple): Variable length argument list.
            **kwargs (dict): Arbitrary keyword arguments.
        Returns:
            iterator: An iterator object, which when called should execute the object's asynchronous code and ultimately yield a final result.
        Raises:
            This method will typically raise the appropriate exceptions related to the asynchronous execution of the awaitable object.
        """
        ...

    @staticmethod
    def results(value: T) -> "Future":
        """
        Returns a Future object for the given value.
            This static method checks if the provided value is already a future object. If so, it casts the value to a Future type and returns it. If not, it creates a new Future object, sets the given value as the result of the future, and returns the new future object.
            Args:
                value (T): The value to be encapsulated in a Future object. Can be any type `T`, including a Future instance.
            Returns:
                Future: A future object which either directly represents the given value, or a new future to which the value has been set as the result.
        """
        if asyncio.isfuture(value) or isinstance(value, futures.Future):
            return typing.cast(Future, value)
        future = futures.Future()
        future.set_result(value)
        return typing.cast(Future, future)


if __name__ == "__main__":
    foo = Future.results(1)
    print(foo.result())
