"""

A protocol definition for a Logger class that specifies standard logging methods.

    This Logger protocol serves as a guideline for implementing a logging system in an application.
    It defines the set of methods that a Logger class must support to provide a consistent
    interface for logging messages with different levels of severity.

    Each method takes a message (`msg`) as the primary argument, which is the text to be logged,
    potentially mixed with variable data using formatting specifiers. Additional positional arguments
    (`*args`) may be included alongside the message, depending on the specific logging system's
    capabilities and configuration. Keyword arguments (`**kwargs`) are also accepted to provide
    further context or metadata for the log entry.

    Methods:
        setLevel(level):
            Set the logging level of this logger instance.

        debug(msg, *args, **kwargs):
            Log a debug message.

        info(msg, *args, **kwargs):
            Log an informational message.

        warning(msg, *args, **kwargs):
            Log a warning message.

        error(msg, *args, **kwargs):
            Log an error message.

        exception(msg, *args, exc_info=True, **kwargs):
            Log a message with exception information.

        critical(msg, *args, **kwargs):
            Log a critical message that indicates a serious application error.

        fatal(msg, *args, **kwargs):
            Log a fatal message that indicates an error leading to a program crash.

        log(level, msg, *args, **kwargs):
            Log a message with a specific logging level.

    The methods except for `setLevel` can be considered a mapping to the `log` method with
    the respective predefined logging levels.

Note: Documentation automatically generated by https://undoc.ai
"""
import typing

# TODO add typing for logger


class Logger(typing.Protocol):
    """
    A protocol defining the interface for a Logger class, outlining the logging methods and the behavior expected from any concrete implementation of a logger following this protocol.
    Attributes:
        Not applicable.
    Methods:
        setLevel(level):
            Sets the logging level for this logger instance.
        debug(msg, *args, **kwargs):
            Logs a debug message.
        info(msg, *args, **kwargs):
            Logs an informational message.
        warning(msg, *args, **kwargs):
            Logs a warning message.
        error(msg, *args, **kwargs):
            Logs an error message.
        exception(msg, exc_info=True, **kwargs):
            Logs an exception message, including traceback information.
        critical(msg, *args, **kwargs):
            Logs a critical message.
        fatal(msg, *args, **kwargs):
            Logs a fatal message, typically equal to critical in severity.
        log(level, msg, *args, **kwargs):
            Logs a message with a specific logging level.
    Each method's parameters, besides the required message `msg`, may optionally include arguments `args` and keyword arguments `kwargs`, which are passed through to the underlying logging implementation.
    Notably, the `exception` method includes an `exc_info` argument that defaults to `True`, ensuring exception information is included when calling this method.
    """
    def setLevel(self, level):
        """
            Sets the level of an attribute or value within the object.
            This method is designed to set or update the level of a particular
            attribute or a property associated with the object instance. Calling this
            method changes the state of the object to reflect the new level set.
            Args:
                level (int, str): The new level to be set for the attribute or
                    value. The type of level (integer or string) is contingent on
                    the domain and implementation specifics of the object's class.
            Raises:
                TypeError: If the provided level has an inappropriate type.
                ValueError: If the provided level is invalid within the context
                    of the object's functionality.
        """
        ...

    def debug(self, msg, *args, **kwargs):
        """
        Logs a debug message with the current instance's context.
            This method logs a message with a severity level of debug. Additional arguments
            are interpreted as for printf, and additional keyword arguments are passed
            to the underlying logging system.
            Args:
                msg (str): The message format string to log.
                *args: Variable length argument list used for printf-style string formatting of `msg`.
                **kwargs: Arbitrary keyword arguments which are passed to the underlying logger.
        """
        ...

    def info(self, msg, *args, **kwargs):
        """
        Logs an information message to the system.
        This method is used to log a message with the severity level of 'info'.
        It accepts a message string as a mandatory parameter and can optionally
        accept variable arguments and keyword arguments that can be used within
        the logging message or for additional contextual information.
        Args:
            msg (str): The information message to log.
            *args: Variable length argument list that can be used to pass
                non-keyworded, variable-length argument list.
            **kwargs: Arbitrary keyword arguments that can be used to pass
                a dictionary of keyword arguments.
        Returns:
            None
        """
        ...

    def warning(self, msg, *args, **kwargs):
        """
        Generates a warning log message with the argument supplied. This message is intended to indicate potential issues or important considerations that do not necessarily constitute an error condition. The function accepts additional positional and keyword arguments that can be used to provide extra context or formatting for the message being logged. This method should be overridden by subclasses if the warning needs to be captured or displayed in a unique manner specific to the logging framework in use.
        Args:
            msg (str): The message to be logged as a warning.
            *args: Variable length argument list used to pass non-keyworded, variable-length argument list.
            **kwargs: Arbitrary keyword arguments.
        """
        ...

    def error(self, msg, *args, **kwargs):
        """
        Logs an error message to the system with additional context details if provided.
            This function logs an error message, potentially including additional arguments and keyword arguments to provide more context about the error. It is typically used within a class that has logging capabilities, where 'self' refers to the current instance of the class.
            Args:
                msg (str): The error message to be logged.
                *args: Variable length argument list that may provide additional context for the error message.
                **kwargs: Arbitrary keyword arguments that may provide additional information about the circumstances of the error.
            Returns:
                None
        """
        ...

    def exception(self, msg, *args, exc_info=True, **kwargs):
        """
            Logs an 'Exception' type message with the given arguments.
            This method constructs an 'Exception' log message using the provided message string and additional arguments. It then logs this message with 'Exception' severity. If exc_info is True (the default), exception information is added to the logging message.
            Args:
                msg (str): The message for the exception log.
                *args: Variable length argument list for message formatting.
                exc_info (bool, optional): Determines if exception information should be included in the log. Defaults to True.
                **kwargs: Arbitrary keyword arguments.
            Returns:
                None
        """
        ...

    def critical(self, msg, *args, **kwargs):
        """
            Logs a message with the CRITICAL level of severity.
            This method logs a message with a severity level of CRITICAL, indicating a severe error event that
            is presumably enough to halt the application. The message is formatted with the supplied arguments and
            extra keyword arguments.
            Args:
                msg (str): The message format string to log.
                *args: Variable length argument list used for message formatting.
                **kwargs: Arbitrary keyword arguments which can be passed to the log handler.
            Returns:
                None
        """
        ...

    def fatal(self, msg, *args, **kwargs):
        """
        Logs a message with severity 'FATAL' on this logger, then halts the program execution. This function will pass all arguments to the underlying logging mechanism, and then call `sys.exit(1)` to terminate the process with a status code indicating a failure. The msg argument is the message format string, and the args are the arguments which are merged into msg using the string formatting operator. There are additional keyword arguments (kwargs) that can be passed to customize the logging behavior or add extra context in the log record generated for this event.
        Args:
            msg (str): Message format string describing the fatal error condition.
            *args: Variable length argument list used for message formatting based on the format string.
        Kwargs:
            **kwargs: Arbitrary keyword arguments which can be used to provide additional context for the log record or alter the logging behavior.
        Returns:
            None
        Raises:
            SystemExit: This function will always raise SystemExit with a status code of 1 to indicate a fatal exit condition after logging the message.
        """
        ...

    def log(self, level, msg, *args, **kwargs):
        """
                Logs a message with a specific severity level.
                This method formats the message with specified arguments and
                keyword arguments, then records it with the given severity level.
                Args:
                    level (int): Severity level of the log. Typically an integer from the
                        logging module (e.g., logging.DEBUG, logging.INFO).
                    msg (str): Message string to be logged. This may contain format strings
                        which will be replaced by the values of args.
                    *args: Variable length argument list which may be used to provide values
                        that are referenced in the `msg` format string using standard
                        string formatting syntax.
                    **kwargs: Arbitrary keyword arguments which may be used for providing
                        additional context or data for the log record.
                Returns:
                    None
        """
        ...
