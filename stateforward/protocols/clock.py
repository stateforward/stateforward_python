"""

A protocol for Clock objects that provide the current time.

This module defines a `Clock` class, which is a typing Protocol that specifies a
contract for clock-like objects. The protocol includes a `multiplier` class
variable that represents time unit conversion (defaulting to milliseconds) and an
abstract method `now` that must be implemented by concrete subclasses to return the
current datetime.

Attributes:
    multiplier (float): A class variable that specifies the time unit multiplier.
        The default value of `0.001` indicates that time is measured in milliseconds.

Methods:
    now:
        Abstract method that should be implemented by subclasses. It is
        expected to return the current date and time (`datetime.datetime` object).
        Concrete implementations might adjust the time returned based on the
        `multiplier` or other factors internal to the `Clock` implementation.

Note: Documentation automatically generated by https://undoc.ai
"""
import typing
from datetime import datetime


class Clock(typing.Protocol):
    """
    A `Clock` is a protocol that defines the interface for objects that provide the current time.
        This protocol expects a class implementing it to provide the `now` method, which should return the current time.
        It also suggests a class-level attribute `multiplier` that can be used to adjust the resolution of the time.
        Attributes:
            multiplier (float): A class-level attribute that represents the time multiplier to adjust the resolution. Defaults to 0.001, which corresponds to 1 millisecond.
        Methods:
            now: Should be implemented by classes that conform to this protocol to return the current datetime.
    """
    multiplier: float = 0.001  # 1ms

    def now(self) -> datetime:
        """
            Retrieves the current date and time.
            This function returns the current date and time as a datetime object.
            Returns:
                datetime: A datetime object representing the current date and time.
        """
        ...
