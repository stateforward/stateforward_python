"""

Provides a `Queue` protocol to define standard queue interface with type annotations for generic typing.

Attributes:
    T: A type variable representing the types allowed in the queue.

Methods:
    task_done:
        Marks a previously enqueued task as complete.

    join:
        Blocks until all items in the queue have been received and processed.

    qsize:
        Returns the number of items in the queue.

        Returns:
            The current queue size (an integer).

    empty:
        Checks if the queue is empty.

        Returns:
            True if the queue is empty, False otherwise.

    full:
        Checks if the queue is full.

        Returns:
            True if the queue is full, False otherwise.

    put:
        Adds an item to the queue.

        Args:
            item: The item of type `T` to be added to the queue.
            block: A flag to block the current task until the item can be placed. Defaults to True.
            timeout: An optional float representing the number of seconds to wait before raising a Full exception.

        Raises:
            A Full exception if the queue has reached maxsize and `block` is False or if a timeout occurs.

    get:
        Removes and returns an item from the queue.

        Args:
            block: A flag to block the current task until an item is available. Defaults to True.
            timeout: An optional float representing the number of seconds to wait before raising an Empty exception.

        Returns:
            The next item from the queue of type `T`.

        Raises:
            An Empty exception if the queue is empty and `block` is False or if a timeout occurs.

    put_nowait:
        Equivalent to put(item, False).

        Args:
            item: The item to be added to the queue.

        Raises:
            A Full exception if the queue has reached maxsize.

    get_nowait:
        Equivalent to get(False).

        Returns:
            The next item from the queue of type `T`.

        Raises:
            An Empty exception if the queue is empty.

Note: Documentation automatically generated by https://undoc.ai
"""
import typing

T = typing.TypeVar("T", bound=typing.Any)


class Queue(typing.Protocol[T]):
    """
    A thread-safe FIFO queue protocol for generic typing.
    This protocol defines the interface for a queue which can hold items of type 'T'.
    It is thread-safe, meaning that it can be safely used from multiple threads without
    the need for additional synchronization. It provides methods for adding and
    retrieving items, checking the queue's status, and synchronizing tasks in a
    queue-processing scenario.
    Methods:
        put(item, block, timeout)
            Adds an item to the queue. If the queue is full, and 'block' is True,
            this method blocks until a free slot is available or until 'timeout'
            seconds pass. If 'block' is False, the item is put in the queue
            only if a free slot is immediately available, otherwise, it
            raises the Full exception.
        get(block, timeout)
            Removes and returns an item from the queue. If the queue is empty and
            'block' is True, this method blocks until an item is available or until
            'timeout' seconds pass. If 'block' is False, an item is returned
            only if one is immediately available, otherwise, it raises the Empty
            exception.
        put_nowait(item)
            Equivalent to 'put(item, False)'. Adds an item to the queue without
            blocking. Raises the Full exception if no free slot is available
            immediately.
        get_nowait()
            Equivalent to 'get(False)'. Removes and returns an item from the queue
            without blocking. Raises the Empty exception if the queue is empty.
        task_done()
            Indicates that a formerly enqueued task is complete. Used by queue
            consumers. For each 'get()' used to fetch a task, a subsequent call
            to 'task_done()' tells the queue that the processing on the task is
            complete.
        join()
            Blocks until all items in the queue have been received and
            processed. The count of unfinished tasks goes up whenever an item is
            added to the queue and goes down whenever a consumer thread calls
            'task_done()' to indicate that the item was retrieved and all work
            on it is complete. When the count of unfinished tasks drops to zero,
            'join()' unblocks.
        qsize()
            Returns the approximate size of the queue. Note that this number
            is not reliable, since it might be changing quickly as other threads
            work with the queue.
        empty()
            Returns True if the queue is empty; otherwise, False. Note that this
            result is not reliable as it may change if other threads are
            modifying the queue.
        full()
            Returns True if the queue is full; otherwise, False. Due to multithread
            operations, this result might not be accurate in terms of real-time
            state of the queue.
    """
    def task_done(self) -> None:
        """
            Marks a task as successfully completed.
            This method should be called once the task is finished and its result
            should be considered final. It performs any necessary cleanup operations
            and updates the task's state to reflect its completion.
            Raises:
                ValueError: If the task is not in a state that allows for completion.
                RuntimeError: If any errors occur during the cleanup operations.
        """
        ...

    def join(self) -> None:
        """
        Joins two or more elements into a single unified entity. This method doesn't return a value and is expected to operate by side-effects, altering the state of the object it's called upon or the state of other related objects. It's designed to work in the context of the object (`self`) it's a member of, suggesting that the object represents a collection or a sequence of some sort. Implementations may vary depending on the exact behavior intended for the 'join' operation within the object's context.
        """
        ...

    def qsize(self) -> int:
        """
            Returns the approximate size of the queue.
            Note that this number is not reliable, as it might change before or after this function call returns.
            It should not be used in conditions for deadlock-avoidance programming. Only a guideline for
            the number of tasks outstanding.
            Returns:
                int: An approximation of the number of items in the queue.
        """
        ...

    def empty(self) -> bool:
        """
        Checks if the structure is empty.
        Returns:
            bool: True if the structure is empty, False otherwise.
        """
        ...

    def full(self) -> bool:
        """
        Checks if an object, presumably a container, is full or not.
        Returns:
            bool: True if the object is full, False otherwise.
        """
        ...

    def put(
        self,
        item: T,
        block: typing.Optional[bool] = True,
        timeout: typing.Optional[float] = None,
    ) -> None:
        """
            Puts an item into the queue.
            If the queue is full, the function will wait until a free slot is available before adding the item, unless 'block' is set to False.
            In the case where 'block' is False and the queue is full, an appropriate exception will be raised.
            If 'timeout' is provided and the queue remains full for the timeout period, a 'queue.Full' exception will be raised.
            Args:
                item (T): The item to add to the queue.
                block (typing.Optional[bool]): If True (the default), the function will block if necessary until a free slot is available.
                    If False, the function will not block and will raise the 'queue.Full' exception if no free slot is available immediately.
                timeout (typing.Optional[float]): The maximum amount of time to block waiting for a free slot. If None (the default), wait indefinitely.
                    Only relevant if 'block' is True.
            Raises:
                queue.Full: If 'block' is False and the queue is currently full or if 'block' is True and no free slot
                    becomes available within the timeout period.
            Returns:
                None: This method does not return anything.
        """
        ...

    def get(
        self,
        block: typing.Optional[bool] = True,
        timeout: typing.Optional[float] = None,
    ) -> T:
        """
            Retrieves an item from a queue, optionally blocking until an item is available.
            This method is designed to fetch items from a queue-like data structure. If `block` is True (the default), it will
            block until an item is available, unless a `timeout` (in seconds) is specified. If `block` is False, it will
            return immediately, possibly raising a queue-related exception if no items are available.
            Args:
                block (Optional[bool]): If True (default), the method will block until an item can be retrieved. If False,
                    the method will not block and may raise an exception if the queue is empty.
                timeout (Optional[float]): The maximum amount of time (in seconds) the method should block before raising
                    a `TimeoutError` if no item is available. Only meaningful if `block` is True. If `None` (default),
                    the method will block indefinitely until an item is available.
            Returns:
                T: The next item from the queue.
            Raises:
                QueueEmptyException: If `block` is False and the queue is empty.
                TimeoutError: If `block` is True and `timeout` is a positive number, and no item is retrieved within the
                    given `timeout` period.
        """
        ...

    def put_nowait(self, item) -> None:
        """
        Puts an item into the queue without blocking.
        This method is like put(item) but will raise a Full exception if a
        free slot is not immediately available. Rather than blocking, this method
        returns to the caller as soon as possible.
        Args:
            item: The item to be put into the queue.
        Raises:
            Full: If a free slot is not immediately available in the queue.
        Returns:
            None
        """
        ...

    def get_nowait(self) -> T:
        """
        Retrieves and returns an item from the queue without blocking if an item is immediately available, otherwise raises an exception if the queue is empty.
        Returns:
            T: The next item from the queue, if available.
        Raises:
            queue.Empty: If there is no item available in the queue immediately.
        """
        ...
