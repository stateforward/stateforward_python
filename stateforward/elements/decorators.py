"""


Module for providing decorator functions to wrap various element activities.

This module consists of decorator functions which are used to register different
kinds of element activities such as behaviors, constraints, and call events.
They help in the creation of subclasses of the specified element types with the
given activity functions.

Decorators:

    behavior(decorated, subtype=None):
        Decorator to create a new behavior element.

        Args:
            decorated (Callable[[elements.Behavior, Optional[elements.Event]], R]):
                The function to be used as the activity of the new behavior element.
            subtype (Optional[type[elements.Behavior]]):
                A subclass of elements.Behavior to be used as the base class for the
                new behavior element. Defaults to elements.Behavior if not provided.

        Returns:
            type[elements.Behavior]:
                A new subclass of elements.Behavior with the decorated function
                registered as an activity.

    constraint(decorated):
        Decorator to create a new constraint element.

        Args:
            decorated (Callable[[elements.Constraint, elements.Event], bool]):
                The function to be used as the condition of the new constraint element.

        Returns:
            Type[elements.Constraint]:
                A new subclass of elements.Constraint with the decorated function
                registered as a condition.

    call_event(decorated):
        Decorator to create a new call event element.

        Args:
            decorated (Callable[[elements.CallEvent, elements.Event], Any]):
                The function to be used as the operation of the new call event element.

        Returns:
            Type[elements.CallEvent]:
                A new subclass of elements.CallEvent with the decorated function
                registered as an operation.

Note: Documentation automatically generated by https://undoc.ai
"""
from typing import Callable, TypeVar, ParamSpec, Type, Any, Optional
from functools import wraps
from stateforward import elements
from stateforward import model

T = TypeVar("T")
R = TypeVar("R")
# P = ParamSpec("P")

# def name_of(decorated: Any) -> str:
#     return decorated.__name__ if isinstance(decorated, type) else decorated.__qualname__


def behavior(
    decorated: Callable[[elements.Behavior, Optional[elements.Event]], R],
    subtype: Optional[type[elements.Behavior]] = elements.Behavior,
) -> type[elements.Behavior]:
    """
        Wrap the decorated function and return a new class type based on `elements.Behavior`.
        This function creates a new subclass of `elements.Behavior`, or another specified subtype, and sets the `activity` attribute of the class to the decorated function. The name of the new subclass is determined by the `__name__` attribute of the decorated function. If the `__name__` is not available on the decorated function, the representation (via `repr()`) is used.
        Args:
            decorated (Callable[[elements.Behavior, Optional[elements.Event]], R]): The function to be decorated and included as part of the new behavior subclass.
            subtype (Optional[type[elements.Behavior]]): The type from which the new behavior subclass will inherit. If not provided, the default is `elements.Behavior`.
        Returns:
            type[elements.Behavior]: A new subclass of `elements.Behavior` or the specified `subtype` with the decorated function as the `activity` attribute.
    """

    @wraps(decorated)
    def wrapper(_decorated: Callable = decorated) -> Callable[[elements.Behavior], R]:
        """
        A decorator function that wraps a callable with the model.element.new constructor to generate a new subclass of elements.CallEvent.
            This function utilizes the functools.wraps decorator to maintain the metadata of the original decorated function, such as its name and docstring. The new subclass will incorporate the original callable as part of its operation.
            Args:
                _decorated (Callable[..., Any]): The callable to be transformed into a subclass of elements.CallEvent. If no callable is provided, the 'decorated' parameter from the enclosing scope will be used.
            Returns:
                Type[elements.CallEvent]: A new subclass of elements.CallEvent which includes the operation of the original callable.
        """
        return model.element.new(
            getattr(_decorated, "__name__", repr(_decorated)),
            bases=(subtype,),
            activity=_decorated,
        )

    return wrapper(decorated)


def constraint(
    decorated: Callable[[elements.Constraint, elements.Event], bool]
) -> Type[elements.Constraint]:
    """
        Creates a new constraint element type with a specified condition function.
        This function serves as a decorator that takes a function representing a condition
        for an element and returns a new subclass of `elements.Constraint` that
        encapsulates this condition. The returned subclass can then be instantiated and used
        within the model to impose the specified condition.
        Args:
            decorated (Callable[[elements.Constraint, elements.Event], bool]):
                A function that takes two arguments - an instance of `elements.Constraint`
                and an `elements.Event` - and returns a boolean value. This value represents the
                outcome of the condition check (True if the condition is met, False otherwise).
        Returns:
            Type[elements.Constraint]:
                A new subclass of `elements.Constraint` that represents the condition
                encapsulated by the decorated function.
        The wrapper function inside is responsible for creating a new subclass of
        `elements.Constraint` with the `condition` attribute set to the decorated function.
        This allows the model to instantiate this new subclass and evaluate the condition as
        part of the element's lifecycle within a simulation or modeling context.
    """

    @wraps(decorated)
    def wrapper(
        _decorated: Callable[[elements.Constraint, elements.Event], bool] = decorated
    ):
        """
            A decorator that wraps a given callable to produce a new subclass of elements.CallEvent.
            The new subclass created by model.element.new will have its operation attribute set to the callable that is being decorated.
            This allows an easy and structured way to create new event types for a model by wrapping existing functions or methods.
            Args:
                _decorated (Callable[[elements.Constraint, elements.Event], bool], optional): The callable that will form the basis of a new
                    elements.CallEvent subclass. This callable is expected to accept two parameters: one of type elements.Constraint and the other of type
                    elements.Event, and return a boolean value. Defaults to the callable `decorated` passed to `call_event`.
            Returns:
                Type[elements.CallEvent]: A new subclass of elements.CallEvent that includes the operation logic provided by the decorated function.
        """
        return model.new(
            getattr(_decorated, "__name__", repr(_decorated)),
            bases=(elements.Constraint,),
            condition=_decorated,
        )

    return wrapper(decorated)


def call_event(
    decorated: Callable[[elements.CallEvent, elements.Event], Any]
) -> Type[elements.CallEvent]:
    """
        Decorator that creates a new CallEvent class with the decorated function as its operation.
        This function is intended to be used as a decorator. It wraps the given callable `decorated`
        inside another function `wrapper` that creates a new subclasses of `elements.CallEvent`.
        The `decorated` callable is assigned as an operation of the newly created subclass to
        allow it to handle call events.
        Args:
            decorated (Callable[[elements.CallEvent, elements.Event], Any]): A callable that takes
                an instance of `elements.CallEvent` and an `elements.Event` as parameters and
                returns any type. This callable represents the operation to be associated with the
                CallEvent subclass created by this decorator.
        Returns:
            Callable[..., Type[elements.CallEvent]]: A wrapped callable that, when called, returns
                a new subclass of `elements.CallEvent` that has `decorated` assigned as its operation.
    """

    @wraps(decorated)
    def wrapper(_decorated: Callable[..., Any] = decorated) -> Type[elements.CallEvent]:
        """
        Decorates a function to create a new subclass of elements.CallEvent with the decorated function as an operation.
            This function is intended to be used as a decorator for functions that should act as operations for a new subclass
            of elements.CallEvent. The new subclass is created with a name derived from the decorated function and includes
            the original function as a class method named 'operation'.
            Args:
                _decorated (Callable[..., Any]): The function being decorated. Defaults to the outer decorated function.
            Returns:
                Type[elements.CallEvent]: The new subclass of elements.CallEvent created with the decorated function as an operation.
            Raises:
                Any exceptions that may be raised by the model.element.new method during the creation of the new subclass.
        """
        return model.element.new(
            _decorated.__name__,
            bases=(elements.CallEvent,),
            operation=_decorated,
        )

    return wrapper(decorated)
