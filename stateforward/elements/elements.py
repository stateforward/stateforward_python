"""

A module providing constructs for defining state machine components and their behaviors, along with various kinds of events and transitions that can occur within a state machine context.

This module is part of a state machine framework called `stateforward`, which allows for the description and execution of complex stateful behavior patterns.

Classes:
    ConcurrencyKind(Enum): Enumeration representing different kinds of concurrency modes.

    Vertex(model.Element): Base class for vertices within a state machine, which can have incoming and outgoing transitions.

    FinalState(Vertex): Represents a final state within a region.

    TransitionKind(Enum): Enumeration of transition kinds that specify the behavior of state transitions.

    TransitionPath(model.Element): Encapsulates collections of vertices to define the path taken by a transition.

    Transition(model.Element): Represents a state transition with properties including source, target, events, effect, guard, kind and path.

    PseudostateKind(Enum): Enumerates various kinds of pseudostates within a state machine.

    Pseudostate(Vertex): Base class for pseudostates with a specified kind.

    Initial(Pseudostate): Represents an initial pseudostate that defines the default entry point into a region or composite state.

    EntryPoint(Pseudostate): Represents an entry point to a composite state allowing transitions to target the containing state directly.

    ExitPoint(Pseudostate): Represents an exit point from a composite state allowing transitions to originate directly from the state.

    DeepHistory(Pseudostate): Represents a history pseudostate that records the deepest active state configuration.

    ShallowHistory(Pseudostate): Represents a history pseudostate that records the shallow active state configuration.

    Junction(Pseudostate): Represents a control flow junction within state machine behavior.

    Join(Pseudostate): Represents a synchronization point for merging multiple incoming transitions.

    Choice(Pseudostate): Represents a decision point where conditional branching can occur.

    Fork(Pseudostate): Represents a splitting point for creating parallel flows.

    Event(model.Element): Base class for events that trigger transitions.

    AnyEvent(Event): Represents any kind of event occurring in the state machine.

    CallEvent(Event): Used for representing call events with associated future results and operations.

    TimeEvent(Event): Specifies a timed event that triggers after a certain moment or duration.

    ChangeEvent(Event): Represents an event triggered by the evaluation of a condition.

    CompletionEvent(Event): Denotes an automatic event that occurs when all activities in the current state are completed.
    Constraint(model.Element): Represents constraints that guard transitions or other elements within a state machine.

    CompositeState(model.Element): Base class for states that contain regions defining a nested state machine structure.

    State(Vertex, CompositeState): Represents a state which can have an entry, exit, activity behavior and can be a part of a composite state.

    Region(model.Element): Represents an area within a state machine that can contain vertices and is associated with a state or a state machine.

    Behavior(model.Model): Base class for defining activities with concurrency support and a collection of associated events.

    StateMachine(Behavior, CompositeState): Represents the top-level state machine which contains regions and manages state behaviors.

Note: Documentation automatically generated by https://undoc.ai
"""
from stateforward import model
from typing import (
    Callable,
    Union,
    ClassVar,
    TypeVar,
    ParamSpec,
    Any,
    cast,
    Optional,
)
from enum import Enum
from concurrent.futures import Future
from datetime import datetime, timedelta
import asyncio
import threading
import queue
from stateforward.protocols import Future
import multiprocessing

__all__ = [
    "StateMachine",
    "State",
    "Region",
    "Transition",
    "Vertex",
    "Pseudostate",
    "Initial",
    "Behavior",
    "PseudostateKind",
    "TransitionKind",
    "CallEvent",
    "AnyEvent",
    "FinalState",
    "CompositeState",
    "CompletionEvent",
    "Join",
    "Fork",
    "EntryPoint",
    "ExitPoint",
    "DeepHistory",
    "ShallowHistory",
    "Junction",
    "ChangeEvent",
    "TimeEvent",
    "Choice",
    "Constraint",
    "Event",
    "TransitionPath",
    "ConcurrencyKind",
    "EntryKind",
    "ChangeEvent",
]

T = TypeVar("T")
K = TypeVar("K")
P = ParamSpec("P")
R = TypeVar("R")


class ConcurrencyKind(str, Enum):
    """
    A derived Enum class representing different concurrency models in Python. Each enum member is associated with a string value that describes the type of concurrency it represents.
    Attributes:
        threading (str): An Enum member representing the 'threading' concurrency model where multiple threads of execution run in the same process space.
        multiprocessing (str): An Enum member representing the 'multiprocessing' concurrency model that uses separate processes for parallel execution, allowing for CPU-bound tasks to run on multiple cores.
        asynchronous (str): An Enum member representing the 'asynchronous' concurrency model where the execution of tasks can be paused and resumed, often used in I/O-bound operations to avoid blocking the execution while waiting for external events.
    """

    threading = "threaded"
    multiprocessing = "multiprocessing"
    asynchronous = "asynchronous"


class Vertex(model.Element):
    """
        A Vertex represents a node within a graph or state machine. It is a subclass of model.Element
        and typically functions as a superclass for different kinds of vertices in a state machine, such
        as states or decision points.
        Attributes:
            outgoing (model.Collection['Transition']): A collection of transitions that originate from
                this vertex. The collection is initially empty and should be filled with Transition instances
                that represent outgoing transitions.
            incoming (model.Collection['Transition']): A collection of transitions that terminate at this
                vertex. Similar to `outgoing`, this collection is initially empty and should be populated with
                Transition instances representing incoming transitions.
            container ('Region'): An optional reference to the Region instance that contains this vertex.
                It serves to maintain the hierarchical structure of states within a state machine.
    """

    outgoing: model.Collection["Transition"] = None  # initialize as None
    incoming: model.Collection["Transition"] = None  # initialize as None
    container: "Region" = None  # initialize as None


class FinalState(Vertex):
    """
    A class that represents the final state in a state machine or a similar abstract computational model.
        This class is a specialized version of the `Vertex` class and signifies an endpoint in a flow or process, indicating that
        a particular path or sequence within the state machine has reached its conclusion. A `FinalState` is typically used
        within the context of finite state machines, workflows, or other systems that model states and transitions.
        Attributes:
            Inherits all attributes from the parent `Vertex` class.
        Note:
            Instances of `FinalState` often do not have outgoing transitions, as they represent the completion of a process.
        Inherit from:
            Vertex: The base class from which `FinalState` inherits. It includes foundational attributes and methods
                     for a state within a state machine.
    """


class TransitionKind(Enum):
    """
    An enumeration to define different types of state transitions.
        Attributes:
            internal (Enum): Represents an internal transition, where the state remains unchanged, but actions can occur.
            local (Enum): Represents a local transition, which may entail exiting and entering the same state, allowing for some actions to be triggered.
            external (Enum): Symbolizes an external transition where the state is exited and a different state is entered, thus triggering exit and entry actions.
            self (Enum): Denotes a self-transition that might involve some actions but does not result in exiting or entering the state.
    """

    internal = "internal"
    local = "local"
    external = "external"
    self = "self"


class TransitionPath(model.Element):
    """
    A class that represents a transition path within a model, including the entry and exit vertices.
        This class is a subclass of `model.Element` and is used to define transition paths in
        an object-oriented manner. A transition path consists of two main attributes: `enter` and `leave`,
        which are collections of vertices that represent points at which a state or process can enter or
        leave the path.
        Attributes:
            enter (model.Collection[Vertex]): A collection of Vertex instances representing
                the entry points of the transition path. It is optional and can be None if no
                specific entry points are defined.
            leave (model.Collection[Vertex]): A collection of Vertex instances representing
                the exit points of the transition path. It is optional and can be None if no
                specific exit points are defined.
        Note:
            - The `model.Collection` type is used to hold the Vertex instances, and it should
              be compatible with some kind of iterable containing Vertex instances.
            - Both `enter` and `leave` are optional attributes, meaning that a `TransitionPath` can
              potentially have undefined entry or exit points.
        Example initialization (Assuming model.Element and model.Collection are already defined):
            >>> entry_vertices = model.Collection([Vertex(...), Vertex(...)])
            >>> exit_vertices = model.Collection([Vertex(...), Vertex(...)])
            >>> transition_path = TransitionPath(enter=entry_vertices, leave=exit_vertices)
    """

    enter: model.Collection[Vertex] = None
    leave: model.Collection[Vertex] = None


class Transition(model.Element):
    """
    A Transition represents a state change in a state machine from one vertex (a state or pseudostate) to another, under a set of specified conditions.
        Attributes:
            source (Union[Vertex, 'State', 'Pseudostate']): The originating vertex from which the transition
                initiates. Can be either a Vertex, a State, or a Pseudostate object.
            target (Union[Vertex, 'State', 'Pseudostate']): The destination vertex to which the transition leads.
                Similar to the source, the target can be a Vertex, State, or Pseudostate.
            container ('Region'): The region in which this transition is contained. A region is a part of a StateMachine
                or a CompositeState comprising vertices and transitions.
            events (model.Collection['Event']): The collection of events that trigger the transition. If the
                transition has multiple events, it becomes eligible for traversal when any of them occur.
            effect ('Behavior'): The behavior to be executed when the transition is traversed. It is an
                action that occurs after the transition.
            guard ('Constraint'): A guard condition that must be true in order for the transition to occur.
                If the guard is false, the transition will not trigger even if the events occur.
            kind (TransitionKind): An enum value that describes the type of the transition. Common kinds
                include external, internal, and local transitions.
            path (TransitionPath): An object that characterizes the transition path's granularity
                and influences how the state machine will handle it.
    """

    source: Union[Vertex, "State", "Pseudostate"] = None
    target: Union[Vertex, "State", "Pseudostate"] = None
    container: "Region" = None
    events: model.Collection["Event"] = None
    effect: "Behavior" = None
    guard: "Constraint" = None
    kind: TransitionKind = None
    path: TransitionPath = None


class PseudostateKind(Enum):
    """
        This class represents an enumeration of the different kinds of pseudostates that can exist within a state machine.
        Pseudostates are specific nodes in a state machine that are used to facilitate state transitions and to model complex behaviors. Each pseudostate kind in the enumeration represents a specific type of behavior within the state machine.
        Attributes:
            initial (str): Represents the starting point of a state machine. Only one initial pseudostate is allowed per state machine region.
            choice (str): Denotes a branching point where one of several transitions can be taken based on guard conditions.
            join (str): Indicates a synchronization point where multiple parallel transitions converge into a single outgoing transition.
            deep_history (str): Represents a history pseudostate that remembers the most deeply nested active state configuration.
            shallow_history (str): Represents a history pseudostate that remembers the last active state configuration, but only at the level immediately nested within the compound state.
            fork (str): Denotes a splitting point where a single transition splits into multiple parallel outgoing transitions.
            entry_point (str): Marks a designated entry point into a composite state or a state machine region.
            exit_point (str): Marks a designated exit point from a composite state or a state machine region.
            junction (str): Indicates a complex branching point that can involve guards and actions not directly linked to transitions.
            terminate (str): Represents an end point that signifies the termination of an entire state machine instance.
        This enumeration is typically used to manage the flow and behavior of a state machine by defining specific control nodes that affect the transitions and states in the state machine.
    """

    initial = "initial"
    choice = "choice"
    join = "join"
    deep_history = "deep_history"
    shallow_history = "shallow_history"
    fork = "fork"
    entry_point = "entry_point"
    exit_point = "exit_point"
    junction = "junction"
    terminate = "terminate"


class Pseudostate(Vertex):
    """
    A Pseudostate is a specific type of Vertex used in state machines to represent a transient state or a control state that specifies the manner in which specific transitions affect the state of the state machine. A pseudostate does not have durations and therefore does not alter the state of the system, but rather governs the transitions between states.
    Attributes:
        kind (PseudostateKind): An enumeration value that characterizes the type of the Pseudostate, determining its exact behavior in a state machine.
    """

    kind: PseudostateKind = None


class Initial(Pseudostate, kind=PseudostateKind.initial):
    """
    A class representing an initial pseudostate in a state machine 'Initial' objects are derived from 'Pseudostate'. They hold a reference to one outgoing transition, indicating the first transition to be taken when a state machine's execution is started. This initial pseudostate is a specialization with a default 'PseudostateKind.initial' kind. Attributes: transition ('Transition', optional): The outgoing transition from this initial pseudostate. This transition points to the state that the state machine will enter first. The default value is None, indicating that the transition should be set explicitly.
    """

    transition: "Transition" = None


class EntryPoint(Pseudostate, kind=PseudostateKind.entry_point):
    """
    A Pseudostate that specifies a default entry point for a region or a composite state, which is the target of a transition. This type of Pseudostate denotes the starting point of a state machine or a composite state when invoked. An EntryPoint, being a kind of Pseudostate, must be associated with a PseudostateKind that is specified as an entry point. The 'kind' parameter explicitly sets the PseudostateKind to entry_point upon instantiation of an EntryPoint object.
        Attributes:
            kind (PseudostateKind): An enumeration value that defines the specific kind of Pseudostate that this instance represents. In this case, it is always set to PseudostateKind.entry_point, indicating that the instance acts as an entry point.
        Note:
            EntryPoint is a subclass of Pseudostate and inherits its attributes and methods. Additionally, the 'kind' attribute is pre-set to PseudostateKind.entry_point and should not be modified.
        Inheritance:
            Inherits from Pseudostate.
        See Also:
            Pseudostate
            PseudostateKind
    """


class ExitPoint(Pseudostate, kind=PseudostateKind.exit_point):
    """
        Represents an exit point pseudostate in a state machine.
        An exit point pseudostate is a predefined exit point of a composite state or submachine state in a state machine.
        It allows the state to be exited through this point, which can be connected to the appropriate
        transition in the state machine. The `ExitPoint` class extends the `Pseudostate` class
        and has a specific kind that signifies it is an exit point.
        Attributes:
            kind (PseudostateKind): An enumeration that indicates this pseudostate is an exit point. This is
                                    set by default to `PseudostateKind.exit_point` when an instance of this class is created.
        Inheritance:
            Inherits from `Pseudostate` class.
    """


class DeepHistory(Pseudostate, kind=PseudostateKind.deep_history):
    """
    A Pseudostate with deep history semantics for statecharts and hierarchical state machines.
        This class is a specialization of the Pseudostate that represents the deep history. When a state machine transition leads
        to a deep history pseudostate, the state machine enters the state that was active when the state with deep history was
        last exited. It is a special kind of history state that not only recalls the last state configuration but corrects to the exact
        level of nesting for each substate. A state machine only ever exits a deep history state when a transition to another
        state is taken; upon re-entry, such a deep history state causes the state machine to re-enter the last known configuration.
        Attributes:
            kind (PseudostateKind): Indicates the kind of pseudostate; it should be set to PseudostateKind.deep_history.
        Inheritance:
            Inherits from Pseudostate, a base class for various types of pseudostates in statechart implementations.
        Note:
            The kind attribute should not be manually changed after instantiation, as it specifies the pseudostate's semantic specialization (deep history) and is crucial to the functioning of the state machine.
    """


class ShallowHistory(Pseudostate, kind=PseudostateKind.shallow_history):
    """
    A class representing a shallow history pseudostate within a state machine. The `ShallowHistory` class extends `Pseudostate` and should be initialized with a `PseudostateKind.shallow_history` kind to indicate its specific pseudostate behavior which records the most recently active substate of its region, but not the history within that substate itself. In state machine terminology, a shallow history pseudostate, when transitioned to, will return the state machine to the last active substate of its parent state, without considering the history of deeply nested states.
        Attributes:
            kind (PseudostateKind): The kind of Pseudostate, initialized to `PseudostateKind.shallow_history` for shallow history.
        Inherits:
            Pseudostate: The base class for all pseudostates in a state machine.
        Note:
            The `ShallowHistory` pseudostate must be used within a region that is a direct subcomponent of a composite state.
    """


class Junction(Pseudostate, kind=PseudostateKind.junction):
    """
        A specialized Pseudostate that represents a junction point within a state machine.
        A junction pseudostate is used to chain together multiple transitions. It acts as a
        decision point where the transitions are guarded by conditions. When a junction is
        encountered, the state machine evaluates the guards of the outgoing transitions to
        determine the path of execution.
        Attributes:
            kind (PseudostateKind): An attribute indicating the specific kind of pseudostate that
                this instance represents. For a junction, it would typically be set to
                PseudostateKind.junction.
        Inheritance:
            Inherits from Pseudostate, which contains additional attributes and methods
            relevant to all pseudostates within the state machine framework.
    """


class Join(Pseudostate, kind=PseudostateKind.join):
    """
    A class that represents a join pseudostate in a state machine. A join pseudostate is a synchronization point where multiple transitions converge into one transition. It is used to synchronize concurrent flows in a state machine, ensuring that all concurrent flows have completed before transitioning to the next state. The `Join` class is a specialization of the `Pseudostate` class with its kind set to `PseudostateKind.join` to indicate its join behavior.
        Attributes:
            kind (PseudostateKind): An enumeration value that specifies the kind of pseudostate, which in the case of the `Join` class, is always set to `PseudostateKind.join`. This differentiates it from other types of pseudostates.
        Inheritance:
            Inherits from `Pseudostate`.
        Note:
            The `Join` class is typically involved in advanced state machine configurations where complex synchronization of concurrent states is required. It is an integral part of UML state machine diagrams that model complex behaviors.
    """


class Choice(Pseudostate, kind=PseudostateKind.choice):
    """
    A Class that represents a Choice pseudostate in a state machine.
    Choice is a specific type of Pseudostate which, upon being entered, selects one of its outgoing transitions based on guard conditions. If no guards are satisfied, it can take a default transition. This class inherits from the Pseudostate class and is specialized with the kind attribute set to PseudostateKind.choice, indicating its behavior as a choice node in the state machine.
    Attributes:
        kind (PseudostateKind): An enumeration value that specifies the kind of Pseudostate that this instance represents. For this class, it is set to PseudostateKind.choice by default.
    Inherits:
        Pseudostate: The base class for pseudostates in a state machine.
    """


class Fork(Pseudostate, kind=PseudostateKind.fork):
    """
    A class representing a Fork pseudostate in a state machine. The Fork class is a specialized version of the Pseudostate class, with its kind attribute being set to PseudostateKind.fork by default. A fork pseudostate is used when a state in a state machine has multiple outgoing transitions that need to be taken simultaneously. The Fork class thus acts as a control node that splits a single incoming transition into multiple outgoing transitions, allowing concurrent behaviors in the state machine.
        Attributes:
            kind (PseudostateKind): An attribute inherited from the Pseudostate class, which for the Fork class is fixed to PseudostateKind.fork. It implies the Fork class behaves as a fork node within a state machine.
        Inheritance:
            Fork inherits from the Pseudostate class.
        Note:
            The constructor of the Fork class ensures that the kind attribute is set to PseudostateKind.fork on instantiation, therefore users do not need to specify this attribute when creating a Fork instance.
    """


class Event(model.Element):
    """
    A class that represents an Event within a model structure which is a subclass of the model.Element class.
    Attributes:
        name (str): The name of the Event.
        timestamp (datetime): The time at which the Event occurred.
        details (dict): A dictionary holding detailed information about the Event. This could include various relevant data points that provide context for the Event.
        participants (list of model.Element): A list of model.Element objects representing the entities involved in the Event.
    This class typically would be used to construct representations of events within a given domain model. It allows for attaching a name, a timestamp, and additional detail to an event, as well as associating participants that are a part of or affected by the Event.
    """


class AnyEvent(Event):
    """
    A subclass of `Event` representing a type of event that can be utilized for a wide range of purposes.
    This `AnyEvent` class is a generic event class that may be subclassed or instantiated to represent any specific event that inherits behaviors and properties from its parent `Event` class. It's designed to be versatile and adaptable, allowing it to be used in different contexts where an event abstraction is needed. Since it is a subclass, it can leverage polymorphism to be substituted wherever its parent class is expected, with potentially added behaviors or properties unique to `AnyEvent`.
    Attributes:
        Inherits all attributes from the parent `Event` class unless specifically overridden in this subclass.
    Methods:
        Inherits all methods from the parent `Event` class unless specifically overridden in this subclass.
    """


class CallEvent(Event):
    """
    A subclass of Event that represents an event associated with a callable operation.
        Attributes:
            results: Union[asyncio.Future, Future], optional
                A future object that will hold the result of the callable operation once
                it is completed. This attribute may reference either a Python standard
                `concurrent.futures.Future` or an `asyncio.Future`, depending on the
                context in which the `CallEvent` is used.
            operation: Callable[P, R], optional
                A reference to the callable object (such as a function or a method) that
                this event is associated with. The callable can accept any number of
                parameters (P) and may return a value (R).
        Methods:
            __call__: Callable[P, R], optional
                    A callable that invokes the operation associated with this event.
                    When the `__call__` method is invoked, it will typically trigger the
                    execution of the `operation` and set the result to the `results`
                    future.
        CallEvent is designed to be used within an event-driven architecture to
        handle and keep track of the outcome of specific operations. The `results`
        future can be used by other parts of the system to wait for the operation to
        complete and to fetch its result in a non-blocking manner.
    """

    results: Union[asyncio.Future, Future] = None
    operation: Callable[P, R] = None
    __call__: Callable[P, R] = None


class TimeEvent(Event):
    """
        A class that represents a time-based event, extending from the Event class.
        The TimeEvent class is designed to handle events that are specifically tied to a time. This class allows assigning either
        a specific moment or a time difference that indicates when the event is scheduled to occur. Users can pass
        either a `datetime` object to schedule the event at an exact date and time, or a `timedelta` object to define
        the event occurrence after a certain amount of time has passed.
        Attributes:
            when (Union[datetime, timedelta], optional): A `datetime` or `timedelta` instance that specifies when
                the event should take place. The attribute is optional and defaults to None, indicating that the specific
                time for the event is not set.
    """

    when: Union[datetime, timedelta] = None


ConditionType = Union[threading.Condition, multiprocessing.Condition, asyncio.Condition]


class ChangeEvent(Event):
    """
    A subclass of the `Event` class, representing an event that is triggered when a specified condition is met.
        This class encapsulates the concept of an event that occurs in response to a change in state that satisfies a certain condition. It holds a condition of type `ConditionType` which can be set to any condition that should trigger the event. Additionally, it contains an `expr` attribute that should be a callable object (such as a function) taking an `Event` instance as its argument, and returns a boolean indicating whether the change event should be triggered.
        Attributes:
            condition (ConditionType): An optional attribute that defines the condition upon which the event is triggered.
            expr (Callable[['Event'], bool]): An optional attribute. It should be a function that takes an `Event` object as its only argument and returns a boolean value. This callable is used to evaluate whether the change event should be fired based on the condition represented by the `expr`.
    """

    condition: ConditionType = None
    expr: Callable[["Event"], bool] = None


class CompletionEvent(Event):
    """
    A class representing an event signaling the completion of an operation or task.
    This class is a derivative of the base class `Event` and is specialized in handling
    completion-related information. It provides details about the completion state
    by encapsulating the value associated with the completion and the transition that
    follows the event, if any.
    Attributes:
        value (Any): The data or result associated with the event's completion. This can be of any
    type, depending on what the completion event represents.
        transition (Transition): A reference to a `Transition` object that defines the state change
    triggered by the completion of the event, if applicable. This allows for determining
    the next steps or actions after the event has occurred.
    Methods:
        __init__(self, value: Any=None):
            Initializes a new instance of the `CompletionEvent` class.
            Args:
                value (Any, optional): The initial value to assign to the `value` attribute. It represents
                the data associated with the event's completion. Defaults to None.
    """

    value: Any = None
    transition: Transition = None

    def __init__(self, value: Any = None):
        """
        Initializes a new instance of the class with an optional value parameter. 
           Args:
               value (Any, optional): The initial value to set for the instance. Defaults to None.
            Attributes:
                value (Any): Stores the value passed to the instance during initialization or None if not provided.
        """
        self.value = value


class Constraint(model.Element):
    """
    A class representing a constraint within a model element context.
        This class defines a constraint that is applicable to 'Event' objects. The constraint is
        represented as a condition which is a callable accepting an 'Event' instance and returns
        either a 'Future' or a boolean value. This allows for the creation of both synchronous and
        asynchronous constraints within the system.
        Attributes:
            condition (Callable[['Event'], Union[Future, bool]]): An optional callable that takes
                an 'Event' object as the single argument and returns either a 'Future' object if the
                constraint check is to be performed asynchronously, or a boolean value indicating
                the result of the constraint check if performed synchronously. If the 'condition'
                is 'None', it implies that there is no constraint.
        Inherits:
            - model.Element: This class inherits from the 'Element' class within the 'model' module.
    """

    condition: Callable[["Event"], Union[Future, bool]] = None


class CompositeState(model.Element):
    """
    Class that represents a CompositeState in a state machine.
    CompositeState is a subclass of model.Element and represents a complex state that can have multiple
    child 'Region' instances. Each 'Region' is a state machine in its own right that can encapsulate
    nested states, transitions, and other regions.
    Attributes:
        regions (model.Collection['Region'], optional): A collection of 'Region' instances that
            the CompositeState contains. Each region acts as a separate state machine. If no regions
            are defined, regions can be None.
    Inherits:
        model.Element: Inherits attributes and methods from model.Element class.
    """

    regions: model.Collection["Region"] = None


class State(Vertex, CompositeState):
    """
    A class representing a state within a state machine that may contain behaviors and events.
    The State class may act as a vertex in the state machine graph, and can also be composed of other
    states, making it a composite state. It holds behaviors such as entry, exit, and ongoing activity
    behaviors, as well such as completion events and deferred events. Additionally, a state may
    reference a submachine, which is a nested state machine.
    Attributes:
        entry (Behavior): Optional behavior executed when entering this state. Defaults to None.
        exit (Behavior): Optional behavior executed when exiting this state. Defaults to None.
        activity (Behavior): Optional behavior executed while the state is active. Defaults to None.
        completion (CompletionEvent): An optional event that signifies the completion of
                the state's process. Defaults to None.
        deferred (Collection[Event]): A collection of events that are deferred until the state is
                exited. Defaults to an empty collection.
        submachine (StateMachine): An optional reference to a nested StateMachine
                that this state contains. Defaults to None.
    """

    entry: "Behavior" = None
    exit: "Behavior" = None
    activity: "Behavior" = None
    completion: CompletionEvent = None
    deferred: model.Collection[Event] = None
    submachine: "StateMachine" = None


class Region(model.Element):
    """
    A Region represents a container for Vertices within a StateMachine or a composite State. It may have an optional reference to a State and a StateMachine which contains it, a collection of Vertices which represent substates or other regions, and an Initial pseudo-state representing the default starting state of the Region.
        Attributes:
            state (Optional[State]): A reference to the State object if the Region instance is contained within a State. Defaults to None.
            state_machine (Optional[StateMachine]): A reference to the StateMachine object if the Region instance is contained within a StateMachine. Defaults to None.
            subvertex (model.Collection[Vertex]): A collection of Vertex objects which can represent states or nested regions within the Region.
            initial (Initial): An Initial object that signifies the beginning point for the Region. This is the default state that is entered when the Region is activated.
    """

    state: Optional["State"] = None
    state_machine: Optional["StateMachine"] = None
    subvertex: model.Collection[Vertex] = None
    initial: Initial = None


QueueType = Union[queue.Queue, multiprocessing.Queue, asyncio.Queue]
ActiveType = Union[threading.Event, multiprocessing.Event, asyncio.Event]


class Behavior(model.Model):  # , Generic[T]):
    """
        A class that represents a behavior within a model context, capable of processing events.
        This class serves as a blueprint for defining behaviors which includes the
        concurrency handling, activity function, context management, and event pooling.
        Attributes:
            concurrency_kind (ClassVar[ConcurrencyKind]): A class-level variable that
                defines the nature of concurrency to be used, such as single-threaded or
                multi-threaded execution.
            activity (Callable[['Event'], Future]): A callable that is expected to
                handle an event. When called, it should return a Future object,
                implying asynchronous operation.
            context (Union[T, 'Behavior']): Represents the context in which the
                behavior operates. It could either be a generic type or an instance of
                Behavior itself.
            pool (model.Collection[Event]): A collection that holds events which are
                to be processed by the behavior. The collection type is defined by the
                model it pertains to.
        Note:
            The actual implementation details, such as the nature of the 'Event' type,
            the 'Future' return type's specifics, and the concrete type of the 'pool'
            collection, are dependent on the broader model implementation that uses
            this Behavior class.
    """
    """
    Represents the behavior associated with states in a state machine.

    A behavior is an action or series of actions that may occur when a specific event is
    processed by the state machine. This class is designed to be subclassed to provide
    custom behavior logic as needed for different states.

    ClassVar Attributes:
        concurrency_kind (ClassVar[ConcurrencyKind]): Specifies the kind of concurrency used
                                                       by the behavior. Options include
                                                       threaded, threaded, multiprocessing,
                                                       and asynchronous.

    Attributes:
        activity (Callable[['Behavior', 'Event'], Union[Any, asyncio.Task]]):
            A callable representing the activity to be performed. When behavior is executed,
            this function is called with the behavior instance and the event as arguments.
        context (Union[T, 'Behavior']):
            The context in which the behavior is executed. This is typically the state or the
            state machine that the behavior belongs to.
        pool (Collection[Event]):
            A collection of events that are considered part of the behavior's event pool,
            which it may respond to.

    Note:
        The `activity` attribute can be either a synchronous or an asynchronous callable,
        depending on the concurrency kind specified.


    !!! info
        The actual concurrency behavior is determined by the model Interpreter, and the `concurrency_kind`
        simply provides an indication of how the behavior is meant to be executed in terms of concurrency.

    !!! example "Example"
        === "light_switch.py"
            ```python
            # ... existing code from the LightSwitch example

            # Defining a new Behavior by inheriting the Behavior element
            class PrintBehavior(sf.Behavior):
                # An activity function that prints the state and event information
                def activity(self, event: sf.Event = None):
                    print(
                        f"{self.qualified_name} -> {event.qualified_name if event else 'None'}"
                    )

            # Updating the LightSwitch state machine to use the PrintBehavior
            class LightSwitch(sf.AsyncStateMachine):
                class On(sf.State):
                    entry = sf.bind(PrintBehavior)  # Binding the PrintBehavior to the entry event
                    exit = sf.bind(PrintBehavior)   # Binding the PrintBehavior to the exit event

                class Off(sf.State):
                    entry = sf.bind(PrintBehavior)  # Similarly for the Off state
                    exit = sf.bind(PrintBehavior)

            # ... continuation of the LightSwitch example
            ```
        === "Output"
            The example output below illustrates the invocation of the `PrintBehavior` for each state's entry and exit procedures, with accompanying event details.

            ```bash
            LightSwitch.region.region_0.Off.entry<4313140624> -> None
            LightSwitch.region.region_0.Off.exit<4313140752> -> LightSwitch.region.region_0.transition_from_Off_to_On.events.OnEvent
            LightSwitch.region.region_0.On.entry<4313137296> -> LightSwitch.region.region_0.transition_from_Off_to_On.events.OnEvent
            LightSwitch.region.region_0.On.exit<4313139536> -> LightSwitch.region.region_0.transition_from_On_to_Off.events.OffEvent
            LightSwitch.region.region_0.Off.entry<4313140624> -> LightSwitch.region.region_0.transition_from_On_to_Off.events.OffEvent
            LightSwitch.region.region_0.Off.exit<4313140752> -> None
            ```

            This output demonstrates that the behavior is correctly associated with each state, with the `bind` function ensuring that each behavior is instantiated as a unique object. In contrast, without the `bind` method, multiple states could end up sharing a reference to the same `Behavior` instance, as behavior definitions are types. Using `bind`, we can also pass arguments to adjust the behavior's attributes, allowing for tailored functionality within each state.

    """

    concurrency_kind: ClassVar[ConcurrencyKind] = None
    activity: Callable[["Event"], Future] = None
    context: Union[T, "Behavior"] = None
    pool: model.Collection[Event] = None


class StateMachine(Behavior, CompositeState):
    """
    A StateMachine is a composite class that represents a complex behavior and state management system. It inherits from both the `Behavior` and `CompositeState` classes, working as a hierarchy of states that defines a sequence of steps in which an application can operate. A central component of a state machine is the submachine state, which represents the current active state within the state machine and plays a pivotal role in the transition between states. The StateMachine class also exposes a property 'state' which provides a tuple of all currently active states within the state machine as a view into its internal state management system.
    Attributes:
        submachine_state (State): An instance variable that holds the current active state in the state machine. It acts as a pointer to the active sub-state within the broader state machine.
    Properties:
        state (tuple[State]): A read-only property that returns a tuple of State objects corresponding to the active states in the state machine's interpreter's stack. The states are derived by filtering stack keys that are subtypes of State, ensuring that only relevant state objects are considered.
    Inherits From:
        Behavior: A base class that may define generic behavior potentially used by a state machine.
        CompositeState: A class that allows the state machine to be composed of multiple states, each representing a portion of the overall behavior.
    """

    submachine_state: State = None

    @property
    def state(self) -> tuple[State]:
        """
            Property that retrieves the current state of the interpreter as a tuple.
            This property goes through the interpreter's stack keys and filters out those values
            that are subtypes of `State`, then casts them to `State` instances and returns them
            as a tuple. This allows inspection of the current states held within the interpreter's
            stack.
            Returns:
                tuple[State]: A tuple containing instances of `State` representing the current
                              states in the interpreter's stack.
        """
        return tuple(
            cast(State, value)
            for value in self.interpreter.stack.keys()
            if model.element.is_subtype(value, State)
        )


class EntryKind(Enum):
    """
    An enumeration to represent different kinds of entry behaviors.
        This class is a subclass of the `Enum` type and provides predefined constants that
        are used to specify types of entry behaviors. It offers an easy way to work with
        these specific set of values that are known to be constants, improving code readability
        and maintainability.
        Attributes:
            default (str): Represents the default entry behavior. It typically signifies
                a standard or fallback option when no specific behavior is specified.
            explicit (str): Represents an explicit entry behavior. It usually indicates
                a user-defined or specific choice diverging from the default behavior.
    """

    default = "default"
    explicit = "explicit"
