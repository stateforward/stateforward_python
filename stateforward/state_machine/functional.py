"""

Module designed to extend the functionality of state machines within the stateforward framework.

This module provides utilities to manipulate state machines allowing the creation of submachine states
and regions, as well as the dispatching of events to these state machines. Principally, it offers functions
to define submachine states, regions inside a state machine, and to send events to be processed either by
a specific or all instances of a state machine.

Functions:
    submachine_state(state_machine: type[elements.StateMachine], name: str=None, **attributes) -> model.redefine:
        Creates and returns a state that functions as a submachine within the provided state machine.
        A submachine state is a special kind of state that encapsulates another state machine.

        Args:
            state_machine: The type of the parent state machine where the submachine state will be created.
            name: An optional name for the submachine state. If not provided, one will be generated automatically.
            **attributes: Additional attributes to set on the newly created submachine state.

        Returns:
            A newly created state that functions as a submachine within the parent state machine.

    submachine_region(state_machine: type[elements.StateMachine], **attributes) -> elements.Region:
        Creates and returns a region within the specified state machine functioning as a container for a
        submachine state and its initial state.

        Args:
            state_machine: The type of the parent state machine where the region will be created.
            **attributes: Additional attributes to set on the newly created submachine region.

        Returns:
            A region object containing a submachine state and an initial state.

    send(event: elements.Event, element: typing.Optional[typing.Union[model.Element, str]]=None) ->
    typing.Union[typing.Awaitable, list[typing.Awaitable]]:
        Async function that sends an event to a specified element or to all instances if no element is specified.
        If the element is specified by a string identifier, it fetches the corresponding object from the model.

        Args:
            event: The event to be sent for processing.
            element: The element (or the identifier of the element as a string) to which the event should be sent.
                If None is provided, the event will be sent to all instances.

        Returns:
            If an element is provided, an awaitable is returned for the event to be processed by the element.
            If no element is provided, a list of awaitables is returned for the event to be processed by all instances.

Note: Documentation automatically generated by https://undoc.ai
"""
from stateforward import model
from stateforward.elements import elements
import typing
import asyncio


def submachine_state(
    state_machine: type[elements.StateMachine], name: str = None, **attributes
):
    """
    Creates a new state within the state machine that acts as a submachine, with optional custom attributes.
        This function takes a state machine class and additional attributes to create a submachine state.
        The resulting state is a subclass of the standard state class with the specified attributes.
        It also sets an attribute on the state to indicate that it is a submachine.
        Args:
            state_machine (type[elements.StateMachine]): The class of the state machine to which the state belongs.
            name (str, optional): The name of the state. If given, sets the name attribute for the state. Defaults to None.
            **attributes: Variable length keyword arguments that define attributes to be set on the newly created state.
        Returns:
            The subclass of the :class:`elements.State` that represents the newly created submachine state,
            with the 'submachine' attribute set to itself.
    """
    state = model.redefine(state_machine, bases=(elements.State,), **attributes)
    model.set_attribute(state, "submachine", state)
    return state


def submachine_region(state_machine: type[elements.StateMachine], **attributes):
    """
    Creates a new region for a submachine within a state machine, with an initial state also defined.
    The created submachine region is specifically for nesting a state machine within another. The function
    creates a new state within the state machine, which acts as a container for the submachine. An initial
    state for the submachine region is automatically defined. This region acts as a separate area within
    the encompassing state machine where the nested state machine can operate.
    Args:
        state_machine (type[elements.StateMachine]): The class state machine which will contain the new submachine region.
        **attributes: Variable length keyword arguments. These attributes are passed down when creating the
                    new state which will be the container for the submachine.
    Returns:
        A new region, represented as an instance of elements.Region, which contains the state acting as
        the submachine and its initial state.
    """
    state = submachine_state(state_machine, **attributes)
    region = model.new(
        f"{state_machine.name}SubmachineRegion",
        (elements.Region,),
        owned_elements=(state, elements.initial(state)),
    )
    return region


def send(
    event: elements.Event,
    element: typing.Optional[typing.Union[model.Element, str]] = None,
) -> typing.Union[typing.Awaitable, list[typing.Awaitable]]:
    """
    Sends an event to the associated interpreter of an element or multiple elements.
    This function dispatches an event to a single element or to all elements tracked by the model,
    depending on whether the 'element' parameter is provided. If 'element' is not specified,
    the function iterates over all instances in the model and sends the event to the interpreter
    of each element. If 'element' is a string, it uses the string as a key to find the corresponding
    element in the model's instance collection. If 'element' is an instance of `model.Element`,
    it directly sends the event to that element's interpreter. The function returns an awaitable
    or a list of awaitables related to the event dispatch process.
    Args:
        event (elements.Event): The event to be dispatched.
        element (Optional[Union[model.Element, str]], optional): The target element or the string
            identifier of the element to which to send the event. If omitted, the event is sent
    to all elements in the model.
    Returns:
        Union[Awaitable, list[Awaitable]]: An awaitable if a single element is targeted, or a
            list of awaitables if the event is sent to all elements.
    """
    if element is None:
        return [
                model.of(element).interpreter.send(event)
                for element in model.all_instances().values()
            ]

    if isinstance(element, str):
        element = model.all_instances()[element]
    return model.of(element).interpreter.send(event)
