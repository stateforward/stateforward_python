"""

Module-level docstrings.

This module contains functionalities to create and manage loggers with
a custom formatter that colors the log levels. It uses weak references to hold
loggers to prevent memory leaks.

Classes:
    ColorLevelFormatter: Custom formatter for logging messages with color coding.

Functions:
    create_logger(name: str) -> logging.Logger: Retrieves or creates a logger with the given name.

Attributes:
    LOGGERS (WeakValueDictionary): Cache for storing logger objects.
    stream_handler (logging.StreamHandler): Stream handler with a set custom formatter.


Note: Documentation automatically generated by https://undoc.ai
"""
import logging
import typing
from weakref import WeakValueDictionary


class ColorLevelFormatter(logging.Formatter):
    """
    A custom formatter class derived from logging.Formatter that applies colored formatting to log messages based on their severity level.
    Attributes:
        formatters (ClassVar[dict[int, logging.Formatter]]): A class-level dictionary mapping logging levels to their respective formatters.
    Args:
        level_color_code (int, optional): The ANSI escape code for the color to use for the log level name. Defaults to 97 (white).
        This initializer sets the default formatting string incorporating ANSI color codes that provide different colors for components of the message, such as name, timestamp, log level, line number, function name, and the log message itself. The date and time format is set to '%Y-%m-%d %H:%M:%S'.
    Methods:
        format(self, record, formatter=logging.Formatter):
            Customizes the format method of logging.Formatter to allow for different formatters associated with different log levels. If a formatter is specified for a log level in the 'formatters' attribute, it will be used. Otherwise, the default formatter provided by this class will be used.
            Args:
                record (logging.LogRecord): The log record that needs to be formatted.
                formatter (logging.Formatter, optional): The formatter to be used for formatting the input record. If not provided, defaults to the standard logging.Formatter.
            Returns:
                str: The formatted log message with appropriate color coding based on its severity level.
    """
    formatters: typing.ClassVar[dict[int, logging.Formatter]] = {}

    def __init__(
        self,
        level_color_code: int = 97,
    ):
        """
            Initialize an instance of a custom logging formatter with colorized output.
            This initializer sets up a logging formatter that includes the logger name, timestamp, logging level,
            line number, function name, and log message, with certain parts of the output colorized.
            The level_color_code parameter allows customization of the color associated with the logging level in the log output.
            Args:
                level_color_code (int, optional): A numeric value representing an ANSI color code that defines
                the color of the log level name. Default value is 97 (white).
        """
        super().__init__(
            f"\033[35m [%(name)s]\033[34m [%(asctime)s]\033[{level_color_code}m [%(levelname)s]\033[34m line %(lineno)s, in %(funcName)s\033[97m %(message)s\033[00m",
            datefmt="%Y-%m-%d %H:%M:%S",
        )

    def format(self, record, formatter=logging.Formatter):
        """
        Formats the logging record with colorized level names.
        This method applies color formatting to the level name of a logging record
        before the record is processed by the provided formatter. It uses custom formatters
        defined in `ColorLevelFormatter.formatters` dictionary, which associates logging
        level numbers with formatter functions.
        Args:
            self: The instance of the formatter currently being used.
            record (logging.LogRecord): The log record that is being formatted.
            formatter (logging.Formatter, optional): The formatter to use when formatting
                the log record. If not provided, the default `logging.Formatter` is used.
        Returns:
            str: The formatted log record with the level name colorized.
        """
        return formatter.format(
            ColorLevelFormatter.formatters.get(record.levelno, self), record
        )


ColorLevelFormatter.formatters = {
    logging.WARNING: ColorLevelFormatter(33),
    logging.ERROR: ColorLevelFormatter(31),
    logging.CRITICAL: ColorLevelFormatter(91),
}

LOGGERS = WeakValueDictionary()

stream_handler = logging.StreamHandler()
stream_handler.setFormatter(ColorLevelFormatter())


def create_logger(name: str):
    """
    Creates or retrieves a logger with the given name from a global logger registry.
    This function checks if a logger with the specified name already exists in the global
    `LOGGERS` dictionary. If it does, the existing logger is returned. If not, a new logger is created, set to DEBUG level, a predefined `stream_handler` is attached to it, and it's stored in `LOGGERS` with the given `name` as the key.
    Args:
        name (str): The name of the logger to retrieve or create.
    Returns:
        logging.Logger: The logger instance corresponding to the given name.
    """
    if name in LOGGERS:
        return LOGGERS[name]
    logger = LOGGERS[name] = logging.getLogger(name)
    logger.setLevel(logging.DEBUG)
    logger.addHandler(stream_handler)
    return logger
