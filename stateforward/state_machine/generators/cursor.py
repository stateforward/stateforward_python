"""

Module cursor

This module defines a custom `Cursor` class which extends the built-in `list` class, primarily designed to manage hierarchical text representation with indentation support. This can be useful in contexts where structured formatting is required such as code generation or document formatting.

Classes:
    Cursor: A subclass of the built-in list that contains strings or other Cursors with indentation functionality.

Functions:
    __init__: Constructor to initialize the Cursor instance with an optional indentation level.
    __str__: Represents the Cursor instance as a string with proper indentation for each line.
    auto_indent: Provides a context manager that creates a sub-cursor with increased indentation.
    extend: Method to add multiple items (strings or Cursors) to the Cursor's list.

Exception classes:
    No exception classes are defined in this module.

Note: Documentation automatically generated by https://undoc.ai
"""
from typing import Union
from contextlib import contextmanager


class Cursor(list[Union[str, "Cursor"]]):
    """
    A Cursor class that provides the functionality to maintain a list with indentation handling for its string representation.
    This class extends from the Python built-in list and allows storage of strings or nested 'Cursor' instances. Its main purpose is to represent a structured block of text where each level of nesting corresponds to an increased indentation. This can be useful in scenarios where text needs to be generated with a visual hierarchy, such as code generation or formatted document creation.
    Attributes:
        indent (int): The number of spaces used for indentation at the current level.
    Methods:
        __init__(self, *data, indent: int=0)
            Initializes a new instance of the Cursor class with optional initial data and indentation level.
            Arguments:
                *data: Variable length argument list of strings or nested Cursor instances to initialize the list.
                indent: The number of spaces for the base indentation level. Defaults to 0.
        __str__(self)
            Returns a string representation of the Cursor, with each item properly indented.
            Returns:
                str: The string representation of the Cursor with applied indentation.
        auto_indent(self, indent: int=2)
            A context manager that creates a new Cursor instance with an increased indentation level.
            Arguments:
                indent: The additional indentation to apply to the new Cursor. Defaults to 2.
            Yields:
                Cursor: A new formatted Cursor instance with increased indentation.
        extend(self, *items: Union[str, 'Cursor'])
            Extends the list with additional strings or Cursor instances.
            Arguments:
                *items: An unpacked list of strings or Cursor instances to be added to the current list.
    """
    def __init__(self, *data, indent: int = 0):
        """
            Initialize a new instance of the class.
            This initializer takes variable arguments for data elements and an optional indent level.
            The initializer calls the superclass initializer with the data arguments and sets the indentation level.
            Args:
                *data (tuple): A variable-length tuple of initial data elements.
                indent (int, optional): The indentation level for the new instance. Defaults to 0.
        """
        super().__init__(data)
        self.indent = indent

    def __str__(self):
        """
            Return a string representation of the object, with items indented.
            This magic method overrides the default object string representation with a formatted version,
            where each item of the object is converted to a string, joined by spaces, and split across
            lines. Each line is then indented according to the object's `indent` attribute.
            Returns:
                str: The formatted string representation of the object with lines indented.
        """
        content = " ".join(str(item) for item in self)
        return "\n".join(f"{' ' * self.indent}{line}" for line in content.split("\n"))

    @contextmanager
    def auto_indent(self, indent: int = 2):
        """
        Creates a context manager that generates a new Cursor instance with an increased indent level.
        This context manager is used to create and manage a block of indented content within the Cursor.
        When entered, it yields a new Cursor instance with its indent level increased by a specified amount.
        On exiting the context, it ensures that the newly created Cursor instance is appended to the current one.
        Args:
            indent (int): The number of spaces to increase the indentation by for the new block. Defaults to 2.
        Yields:
            Cursor: A new Cursor instance with the increased indentation level.
        """
        formatted = Cursor(indent=self.indent + indent)
        self.append(formatted)
        try:
            yield formatted
        finally:
            return formatted

    def extend(self, *items: Union[str, "Cursor"]):
        """
        Extends the current instance by appending elements from the given iterable.
        Args:
            *items (Union[str, 'Cursor']): A variable number of arguments that can be either strings or 'Cursor' instances. Each element is added to the end of the current instance's iterable.
        Raises:
            TypeError: If any element in items is neither a string nor a 'Cursor' instance.
        Notes:
            This method delegates to the `super().extend` method of the superclass, potentially augmenting its behavior or handling additional logic specific to this subclass.
        """
        super().extend(items)
