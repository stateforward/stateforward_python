"""

A module that defines a `Visitor` class for traversing elements in a model, applying visitor-pattern methods. 

This module allows for the creation of subclasses of `Visitor` that can perform specific actions when visiting elements within a state forward model. The `Visitor` class itself manages a set of visited element identifiers and supports automatic method lookup based on the qualified name of the elements being visited.

Attributes:
    TITLE_CASE_PATTERN (re.Pattern): A compiled regular expression that matches uppercase characters in a title-case string, used for method name conversion.
    UNDERSCORE_REPLACE_PATTERN (str): A string pattern used for substituting matches found with `TITLE_CASE_PATTERN` with an underscore and the matched character in lowercase, forming snake_case strings.
    __all__ (list): A list of public symbols provided by the module.

Classes:
    Visitor:
        A class that provides mechanisms for visiting elements within a model and applying custom processing logic.

        The class also provides the ability to automatically define new visitor methods based on a dynamic visit method prefix specified by subclasses. Predefined visitor methods for elements and owned elements ensure a comprehensive traversal of model structures.

        Attributes:
            visit_method_prefix (str): The prefix used for visitor methods. Its default value is 'visit' but can be overridden by subclasses.
            visited (set[int]): A set of visited element identifiers to prevent redundant visits.

        Methods:
            __init__(self):
                Initializes a new `Visitor` instance and sets up the `visited` attribute.
            __init_subclass__(cls, visit_method_prefix: Optional[str]=None):
                Class initialization method that allows subclasses to customize the visit method prefix and ensures that visitor methods are correctly inherited and defined.
            visit_element(self, element: Type[model.Element], *args, **kwargs):
                Visits a single element by attempting to invoke a dedicated visitor method based on the element's type.
            visit_owned_elements(self, element: Type[model.Element], *args, **kwargs):
                Visits all owned elements of a given element recursively by invoking `visit_element` on each.
            visit(self, element: Type[model.Model]):
                Initiates the visitation process on a specified model element.

Note:
    The `visit_element` method within the `Visitor` class fetches the element's qualified name and identifier to perform a check against the `visited` set before invoking the dedicated visitor method.

Note: Documentation automatically generated by https://undoc.ai
"""
import re
from typing import Type, Optional
from stateforward import model

TITLE_CASE_PATTERN = re.compile("((?<=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))")
UNDERSCORE_REPLACE_PATTERN = r"_\1"

__all__ = ("Visitor",)


class Visitor:
    """
        This class serves as a base visitor for traversing and processing elements within a model hierarchy.
        It implements the classic Visitor pattern, where the visit operations are defined within the Visitor class
        and the elements provide a way to accept those operations.
        Attributes:
            visit_method_prefix (str): A class attribute that specifies the prefix for methods responsible for
                visiting model elements. This attribute can be overridden in subclasses by providing a new prefix.
            visited (set[int]): A set to keep track of the unique identifiers of already visited elements to avoid
                redundant visits.
        Methods:
            __init_subclass__(cls, visit_method_prefix=None): Class method automatically invoked when a subclass
                is defined. It sets up the visit_method_prefix and ensures that visitation methods exist in the subclass.
                It defines default visitation methods based on those found in the Visitor class, if they're missing in the
                subclass.
            __init__(): Initializes the Visitor instance with an empty set for visited elements.
            visit_element(element: Type[model.Element], *args, **kwargs): Attempts to visit an element in the model.
                The method checks for redefinition and prior visitation before proceeding to visit the element.
                It calls subclass-specific visitation methods if they are available.
            visit_owned_elements(element: Type[model.Element], *args, **kwargs): Iterates and attempts to visit all
                elements owned by the given element.
            visit(self, element: Type[model.Model]): Initiates the visitation process with the provided model as the entry.
    """
    visit_method_prefix: str = "visit"
    visited: set[int]

    def __init_subclass__(cls, visit_method_prefix: Optional[str] = None):
        """
        Initializes the subclass with an optional visit method prefix.
            This method sets the visit method prefix for the subclass, which is used to identify
            the methods responsible for visiting elements during traversal or processing. If a
            specific prefix is not provided, the prefix from the base class is used.
            It also ensures that if the derived class has a different visit method prefix than
            the Visitor base class, it dynamically creates the necessary visitor methods with
            appropriate prefixes if they don't already exist in the derived class.
            Args:
                cls (type): The subclass being initialized.
                visit_method_prefix (Optional[str]): The prefix to use for visit methods; defaults to None.
                    When None, the base class's prefix is retained.
            Raises:
                AttributeError: If the method creation process encounters an error due to missing attributes.
            Note:
                This method is automatically called when a new subclass is created and is not intended
                to be invoked directly.
        """
        cls.visit_method_prefix = visit_method_prefix or cls.visit_method_prefix
        if cls.visit_method_prefix != Visitor.visit_method_prefix:
            for postfix in ("", "_element", "_owned_elements"):
                method_name = f"{cls.visit_method_prefix}{postfix}"
                if not hasattr(cls, method_name):

                    def visitor(
                        *args,
                        __visit__=getattr(
                            Visitor, f"{Visitor.visit_method_prefix}{postfix}"
                        ),
                        **kwargs,
                    ):
                        """
                        Function responsible for delegating calls to a visitor method based on the `Visitor` pattern.
                            This function dynamically retrieves a method from the `Visitor` class using the
                            `Visitor.visit_method_prefix` and a postfix provided in the function's context,
                            then calls that method with any arguments provided to this function.
                            Args:
                                *args: Variable length argument list to be passed to the visitor method.
                                __visit__: The determined method from the `Visitor` class to be invoked. This is
                                            automatically inferred from the context, typically using a dynamically
                                            constructed method name. This param should not be set by the caller.
                                **kwargs: Arbitrary keyword arguments to be passed to the visitor method.
                            Returns:
                                The result of calling the determined visitor method with the provided arguments.
                            Raises:
                                AttributeError: If the constructed method name based on `Visitor.visit_method_prefix` and
                                                postfix does not correspond to a valid method in the `Visitor` class.
                        """
                        return __visit__(*args, **kwargs)

                    setattr(cls, method_name, visitor)

    def __init__(self):
        """
            Initializes a new instance of the class.
            This constructor creates a new instance with an empty set of 'visited' attribute
            which is intended to keep track of visited elements or nodes, typically used in graphs or tree-traversal algorithms.
            Attributes:
                visited (set): A set that stores visited elements to avoid revisiting.
        """
        self.visited = set()

    def visit_element(self, element: Type[model.Element], *args, **kwargs):
        """
        Visits a given element, performs processing, and navigates to owned elements to apply similar processing recursively.
        Args:
            self: The instance of the class containing this method.
            element (Type[model.Element]): The element to be visited.
            *args: Variable length argument list allowing additional arguments to be passed.
            **kwargs: Arbitrary keyword arguments allowing for extended functionality.
        The method starts by retrieving a qualified name and ID for the element. If the element has not been previously visited and is not a redefined element, the method marks it as visited. The method then iterates over the element's method resolution order (MRO) to find a specific visit method that corresponds to the element's type. It uses a naming convention to construct the method name dynamically. If a suitable method is found, it is invoked with the element and any additional arguments. If this custom method returns a truthy value, the process is halted; otherwise, it continues to the next base type. After attempting to apply type-specific processing, the method recursively visits the owned elements of the original element.
        Returns:
            None: The method does not return anything but instead operates via side effects on 'self.visited' and potentially on the 'element' through the specific visit methods it invokes.
        """
        qualified_name = model.qualified_name_of(element)
        element_id = model.id_of(element)
        if not model.element.is_redefined(element) and element_id not in self.visited:
            self.visited.add(element_id)
            for base in element.__mro__:
                method = getattr(
                    self,
                    f"{self.visit_method_prefix}_{TITLE_CASE_PATTERN.sub(UNDERSCORE_REPLACE_PATTERN, base.__name__).lower()}",
                    None,
                )
                if method not in (None, Visitor.visit_element):
                    if method(element, *args, **kwargs):
                        return
                    break
            self.visit_owned_elements(element, *args, **kwargs)

    def visit_owned_elements(self, element: Type[model.Element], *args, **kwargs):
        """
        Visits elements owned by the specified element in a model structure.
        This method iterates over elements owned by the given element and applies a visitation
        function to each of them. The visitation is carried out by the 'visit_element' method
        which must be defined elsewhere. Any additional positional or keyword arguments
        provided are forwarded to this 'visit_element' method.
        Args:
            element (Type[model.Element]): The parent element whose owned elements will be
                visited. This should be an instance of the model.Element or a subclass of it.
            *args: Variable length argument list that is passed to the 'visit_element' method.
            **kwargs: Arbitrary keyword arguments that are passed to the 'visit_element' method.
        """
        for owned_element in model.owned_elements_of(element):
            self.visit_element(owned_element, *args, **kwargs)

    def visit(self, element: Type[model.Model]):
        """
            Visits a given element, typically to apply some operation on it.
            Args:
                element (Type[model.Model]): The element to visit. This is expected to be an instance
                    of a class from the model module, adhering to a specific structure or interface
                    defined by model.Model.
            Returns:
                None: This method does not return anything, as its purpose is to perform an operation
                    on the `element` rather than produce an output.
            Remarks:
                The actual operation performed on the 'element' is handled by the `visit_element` method,
                which is not described in this docstring. It is presumed that `visit_element` is a method
                implemented elsewhere with its own specific functionality.
        """
        self.visit_element(element)
