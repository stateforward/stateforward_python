"""

Module that provides functionality for creating and working with weak associations.

This module defines an 'Association' type which represents a union of two Annotated types, using the NewType factory function. It encapsulates an association with either a 'CallableProxyType' or a 'ProxyType'. The purpose is to hold references to objects without creating a strong reference that would prevent the object from being garbage-collected. It also provides utility functions to check if a value is an association and to create such associations.

Imports:
    Annotated (typing): A type that includes additional metadata used by type checking tools, frameworks, and linters.
    Union (typing): A type representing a union of multiple types.
    NewType (typing): A helper function to create distinct types.
    TypeVar (typing): A type variable for generic programming.
    Any (typing): A type representing any object.
    ProxyType (weakref): A weakly-referenced proxy to another object that supports attribute access.
    CallableProxyType (weakref): A weakly-referenced proxy to a callable object.
    proxy (weakref): Function that creates a proxy object that uses a weak reference.

Typedefs:
    T: A TypeVar for generic typing.
    Association: A Union type representing an association with either a CallableProxyType or a ProxyType.

Functions:
    is_association(value: Any) -> bool
        Check if the provided value is an instance of 'ProxyType' or 'CallableProxyType'.

    association(element: T) -> Association[T]
        Create a weakly-referenced proxy to 'element' if it isn't already an association.

Note: Documentation automatically generated by https://undoc.ai
"""
from typing import Annotated, Union, NewType, TypeVar, Any
from weakref import ProxyType, CallableProxyType, proxy

T = TypeVar("T")

# Define a new type 'Association' which is a union of Annotated types using NewType.
# It represents an association with either a 'CallableProxyType' or a 'ProxyType'.
Association = Union[
    Annotated[T, NewType("Association", CallableProxyType)],
    Annotated[T, NewType("Association", ProxyType)],
]


def is_association(value: Any) -> bool:
    """
    Determines if the provided value is an instance of ProxyType or CallableProxyType.
    Args:
        value (Any): The value to be checked against ProxyType or CallableProxyType.
    Returns:
        bool: True if the value is an instance of ProxyType or CallableProxyType, False otherwise.
    """
    return isinstance(value, (ProxyType, CallableProxyType))


def association(element: T) -> Association[T]:
    """
    Determines if the given 'element' should be wrapped in a proxy to create an 'Association' object and returns it. If 'element' is already an 'Association', it is returned as is, without being wrapped in a new proxy.
    Args:
        element (T): The element to associate or an existing 'Association'.
    Returns:
        Association[T]: The 'Association' of the given 'element', either by creating a new proxy or returning the existing one.
    """
    new_association = proxy(element) if not is_association(element) else element
    return new_association
