"""

Module for defining and manipulating collections of Elements. A collection is a generic container that is composed of a series of elements. The `Collection` class and its associated functions provide the ability to create, iterate, sort, and extend these groupings of elements, which all derive from a base `Element` class. The `Collection` class utilizes a metaclass that enables class-based iteration and length determination among other features.

Functions:
    is_collection(value):
        Checks if the given value is an instance or subtype of a Collection.

    collection(*elements):
        Creates a new Collection type with the given elements.

    iter_collection(element):
        Returns a generator that yields elements of the given collection one by one.

    sort_collection(element, key=None, reverse=False):
        Sorts the elements within the collection in-place based on the provided key and reverse parameters.

    extend_collection(collection_element, *elements):
        Extends a given collection with additional elements.

Classes:
    CollectionMetaclass:
        A metaclass for the Collection class that provides custom behavior such
        as enabling the use of len() on the class itself and allowing iteration.

    Collection(Element[T], metaclass=CollectionMetaclass):
        A generic container class for a collection of elements. The class provides
        methods to get the length, iterate, and retrieve items by index.

Type Aliases:
    CollectionType:
        A type alias for either the Collection class itself or an instance of it.

    ElementType:
        A type alias for the type bound to `Element`, representing an individual element within a collection.

    T:
        A type variable with an upper bound of `Element`, representing generic element types within collection classes and functions.

Note: Documentation automatically generated by https://undoc.ai
"""
import typing
from stateforward.model.element import (
    Element,
    add_association_to,
    is_subtype,
    ElementType,
)

T = typing.TypeVar("T", bound=Element)


def is_collection(value: typing.Any) -> bool:
    """
    Determines whether a given value is a subtype of the `Collection` type.
        This function checks if the provided `value` argument is a subtype of `Collection`.
        It returns True if `value` is a subtype of `Collection`, and False otherwise.
        Args:
            value (typing.Any): The value to be checked against the `Collection` type.
        Returns:
            bool: True if `value` is a subtype of `Collection`, otherwise False.
    """
    return is_subtype(value, (Collection,))


def collection(*elements: ElementType) -> type["Collection"]:
    """
    Constructs a new collection type with given elements and length attribute.
    Args:
        *elements (ElementType): An arbitrary number of elements to include in the collection.
    Returns:
        type[Collection]: A new collection class which includes the passed elements as attributes and a length attribute indicating the number of elements.
    """
    new_collection = type(
        "collection",
        (Collection,),
        {
            "length": len(elements),
            **dict((str(index), element) for index, element in enumerate(elements)),
        },
    )

    return typing.cast(ElementType, new_collection)


def iter_collection(
    element: typing.Union[type["Collection[T]"], "Collection[T]"],
) -> typing.Generator[T, None, None]:
    """
        Iterates over a collection and yields its elements.
        This function takes a collection object that implements a length property and numerical index access. It iterates over 
        the elements of the collection by index and yields each element in sequence.
        Args:
            element (Union[type['Collection[T]'], 'Collection[T]']): The collection or the type of the 
                collection to iterate over. The collection must support length determination and numerical 
                indexing by implementing a length property and allowing access to elements via numerical indices.
        Yields:
            Generator[T, None, None]: A generator that yields elements of the collection of type 'T' one by one.
    """
    for index in range(element.length):
        yield getattr(element, str(index))


def sort_collection(element: type["Collection"], key=None, reverse=False):
    """
        Sorts the attributes of a given collection-like object based on a specified key function and order.
        This function takes a collection-like object (with iterable and length properties) and sorts its
        attributes according to the provided key function and the ascending or descending order
        determined by the `reverse` parameter. Each attribute expected to be named as a string of an
        integer (e.g., '0', '1', '2', ...), and the sorting is applied based on their values.
        Args:
            element (type['Collection']): The collection-like object to be sorted. Expected to have
                attributes named as strings of integers and a `length` property.
            key (Optional[Callable[[Any], Any]]): A function of one argument that, given an attribute
                value, returns a comparison key for sorting. The default value `None` means that the
                attribute values are compared directly.
            reverse (bool): If set to `True`, the collection is sorted in descending order. By default,
                it is sorted in ascending order (`False`).
        Returns:
            None. The function operates in-place by rearranging the attributes of the given
            `element` based on the sorted order.
        Raises:
            AttributeError: If the `element` does not have the expected string-named attributes or
                the `length` property.
            TypeError: If the `key` function is not callable and not None, or if any of the expected
                attributes are missing or cannot be set.
        Note:
            This function assumes the collection-like object's attributes follow a specific naming
            convention and structure. If the `element` does not conform to these expectations, the
            function may not work as intended and can raise exceptions.
    """
    sorted_elements = sorted(
        (getattr(element, str(x)) for x in range(element.length)),
        key=key,
        reverse=reverse,
    )
    for index, _element in enumerate(sorted_elements):
        setattr(element, str(index), _element)


def extend_collection(
    collection_element: "CollectionType", *elements: typing.Collection[ElementType]
):
    """
        Extends a collection with additional elements.
        This function takes a collection of a certain type and a variable number of elements to be added to the collection. For each element provided, it creates an association with the collection element and then updates the length of the collection to reflect the new total number of associated elements.
        Args:
            collection_element (CollectionType): The collection to which elements are to be added. The collection should have a length attribute that tracks the number of elements.
            *elements (typing.Collection[ElementType]): A variable number of elements that are to be added to the collection. Each element must be of a type compatible with the collection.
        Returns:
            None
    """
    for element in elements:
        add_association_to(collection_element, element, str(collection_element.length))
        collection_element.length += 1


CollectionType = typing.Union[type["Collection"], "Collection"]


class CollectionMetaclass(type):
    """
    A metaclass for creating collection classes with a fixed length attribute.
        This metaclass defines the __len__ and __iter__ special methods on the class level,
        allowing instances of the meta classes to respectively report a length and return
        an iterator over its elements. It is assumed that the actual collection iteration
        logic is implemented by an external function `iter_collection` that is not
        defined within this metaclass.
        Attributes:
            length (int): A class-level attribute that specifies the length of
                          the collection.
        Methods:
            __len__(cls):
                Returns the length of the collection class.
                Returns:
                    int: The value of the class attribute `length`.
            __iter__(cls) -> typing.Iterator[T]:
                Returns an iterator over the elements in the collection class.
                The concrete implementation of the iterator is provided by the
                `iter_collection` function, which is not defined in this metaclass but
                should be provided elsewhere.
                Returns:
                    typing.Iterator[T]: An iterator over the collection elements.
    """
    length: int = 0

    def __len__(cls):
        """
        Returns the length of an instance of the class.
            This method is a special method that is called by the len() built-in
            function and returns the number of elements within the class instance
            that represents a collection or container of elements.
            Returns:
                int: The number of elements in the class instance.
        """
        return cls.length

    def __iter__(cls) -> typing.Iterator[T]:
        """
        Iterates over the elements of a collection class.
            This magic method allows a class to be iterable, meaning that it can be
            used in a for loop and other contexts where an iterator is expected.
            Returns:
                typing.Iterator[T]: An iterator over the elements of the collection class.
        """
        return iter_collection(cls)


class Collection(Element[T], metaclass=CollectionMetaclass):
    """
    A generic collection class which builds upon the Element class and includes iterable properties.
        This class allows for creating collections of elements of a specific type, which can be iterated over,
        accessed via index, and supports type hinting for elements within the collection. The actual
        collection length and item retrieval is defined within the collection metaclass (`CollectionMetaclass`).
        Attributes:
            T (type): The type parameter for elements within the collection.
        Methods:
            __len__(self):
                Returns the length of the collection as defined by the collection's metaclass.
                Returns:
                    int: The length of the collection.
            __iter__(self) -> typing.Iterator[T]:
                Returns an iterator for the collection, allowing the collection to be iterated over in for-loops and
                other iterable contexts.
                Returns:
                    typing.Iterator[T]: An iterator for the collection.
            __getitem__(self, index: int) -> T:
                Retrieve an item from the collection by its index.
                Args:
                    index (int): The index of the item to be retrieved.
                Returns:
                    T: The item at the given index in the collection.
            __class_getitem__(cls, item):
                Provides support for generic types and instantiation with indexing, which is especially useful
                for type checking and type hinting.
                This method first checks if the 'item' is a numeric index; if so, it retrieves
                the corresponding item using the index. Otherwise, it defers to the superclass's __class_getitem__.
                Args:
                    item: The index or generic type to be retrieved from the class.
                Returns:
                    Either an item associated with the numeric index or a generic type from the superclass.
        Metaclass:
            CollectionMetaclass: A metaclass that defines the behavior of the collection, such as the mechanism
                                 for storing values and determining the collection's length.
    """
    def __len__(self):
        """
        Calculates the length of the object by returning the class-specific 'length' attribute value.
        This method allows the object to be used in contexts where a length is needed, such as when passed to functions like len(). It accesses the 'length' attribute, which is expected to be defined at the class level, and returns its value as an integer, representing the count or size of the object in question.
        Returns:
            int: The length of the object, as defined by the class's 'length' attribute.
        """
        return self.__class__.length

    def __iter__(self) -> typing.Iterator[T]:
        """
        Iterates over the elements in the collection encapsulated by the current instance.
            This method utilizes the 'iter_collection' generator function to yield elements one by one.
            Returns:
                typing.Iterator[T]: An iterator for the collection that provides access to the elements.
        """
        return iter_collection(self)

    def __getitem__(self, index: int) -> T:
        """
            Retrieves an attribute based on a numeric index.
            This magic method allows instances of the class to use the subscription syntax (e.g., instance[index])
            to dynamically access attributes. The method translates an integer index into a string
            and fetches the attribute of that name using `getattr`.
            Args:
                index (int): An integer index that represents the name of the attribute to be accessed.
            Returns:
                T: The value of the attribute corresponding to the computed attribute name.
            Raises:
                AttributeError: If the attribute corresponding to the computed attribute name does not exist.
                TypeError: If `index` is not an integer.
        """
        return getattr(self, str(index))

    def __class_getitem__(cls, item):
        """
        Describes the behavior of the class when the class is indexed using square brackets with support for simulated generic types.
            This method is a class method that allows for the retrieval of attributes based on their name if provided as a string that represents a numeric value. If the provided item does not conform to this naming convention, it delegates the indexing operation to the superclass's __class_getitem__ method.
            Args:
                cls (type): The class on which the method is being called.
                item (Any): The key representing the attribute of the class to be accessed. It is expected to be a string that can be converted to a numeric value or any value acceptable by the superclass.
            Returns:
                Any: The attribute value corresponding to the numeric string key if the key is a numeric string, or the result of the superclass's __class_getitem__ method otherwise.
            Raises:
                Exception: Based on the implementation of the superclass's __class_getitem__ method, exceptions may be raised if the item is not found or the operation is otherwise invalid.
        """
        if str(item).isnumeric():
            return getattr(cls, str(item))
        return super().__class_getitem__(item)
