"""


    Module to define the `Attribute` class and the `attribute` function for creating new Attribute instances.

    This module contains the `Attribute` class, which is a subclass of `Element`. It manages the behavior
    of any class attribute, including getting, setting, and deleting the class's attributes. The class
    also allows for a default value to be specified for an attribute.

    The `attribute` function is a convenience factory method that facilitates creating new instances
    of `Attribute` with the option to set a default value.

    Classes:
        Attribute(Element): A class for handling attribute-related operations within a class.

    Functions:
        attribute(default_value: Any=None) -> Attribute:
            A factory function to create a new `Attribute` instance with an optional default value.

    Attributes:
        Attribute.default_value (Any): Class variable to hold the default value for the attribute.
    

Note: Documentation automatically generated by https://undoc.ai
"""
from stateforward.model.element import Element, new
from typing import Any


class Attribute(Element):
    """
    Class representation of an attribute within an `Element`.
    This class is an extension of the `Element` class that permits the definition of an additional class attribute `default_value`. The class provides a method to define attribute metadata at the class level and overrides the descriptor methods `__get__`, `__set__`, and `__delete__` for accessing, setting, and deleting attribute values on instances.
    Attributes:
        default_value (Any, optional): A class-level attribute to hold the default value of the attribute. Defaults to None.
    Class Methods:
        __define__(cls, **kwargs): Dynamically defines attribute properties and default values for an inheriting class.
            Args:
                **kwargs: Additional keyword arguments where 'default_value' key could be provided to override the default.
    Instance Methods:
        __get__(self, instance, owner): Accessor method to retrieve the value of the attribute from the instance's `attributes` dictionary.
            Args:
                instance: The instance of an object where the attribute is accessed.
                owner: The owner class of the instance.
            Returns:
                The value associated with the attribute in the instance's `attributes` dictionary.
        __set__(self, instance, value): Mutator method to set the value of the attribute in the instance's `attributes` dictionary.
            Args:
                instance: The instance of an object where the attribute is set.
                value: The value to be set for the attribute.
        __delete__(self, instance): Mutator method to delete the attribute from the instance's `attributes` dictionary.
            Args:
                instance: The instance of an object where the attribute is deleted.
    """
    default_value: Any = None

    @classmethod
    def __define__(cls, **kwargs):
        """
            Defines class attributes with provided keyword arguments upon class construction.
            This class method is used to dynamically set attributes for the class with given default
            values or override existing attributes. It can be useful when you need to
            set up certain configurations during class initialization.
            Args:
                **kwargs: Arbitrary keyword arguments.
                    default_value (optional): Default value to be assigned if 'default_value' key is present in the kwargs.
                    The value is popped from kwargs and then assigned to the 'default_value' attribute of the class.
                    Any remaining keyword arguments are added to the 'attributes' dictionary of the class.
            Returns:
                None
        """
        cls.default_value = kwargs.pop("default_value", None)
        cls.attributes = {**cls.attributes, "default_value": cls.default_value}

    def __get__(self, instance, owner):
        """
        Gets the value of an attribute based on its name from the instance's attributes dictionary. This method follows the descriptor protocol which allows an object to define behavior when it is accessed as an attribute of another object. This method should not be called directly but is used by the Python runtime to perform attribute access on properties that are instances of the class defining this method. Note that this method only gets called if the property is accessed through an instance, not through the class itself. Parameters: instance (object): The actual instance of the class where the attribute is being accessed from. owner (type): The class owning the attribute. Returns: The value of the attribute identified by `self.name` within the `instance.attributes` dictionary. Raises: KeyError: If the `self.name` key does not exist in the instance's attributes dictionary. 
        """
        return instance.attributes[self.name]

    def __set__(self, instance, value):
        """
        Sets the value of the attribute with the given name for the instance provided.
        Args:
            instance (object): The instance whose attribute is to be set.
            value (Any): The value to assign to the instance's attribute.
        """
        instance.attributes[self.name] = value

    def __delete__(self, instance):
        """
            Deletes the attribute corresponding to the descriptor name from the supplied instance.
            This method is invoked when the attribute associated with this descriptor is
        deleted. It removes the attribute from the instance's 'attributes' dictionary.
            Args:
                instance (object): The object instance from which the attribute is
        to be deleted.
            Raises:
                AttributeError: If the attribute cannot be found within the instance's
        'attributes' dictionary.
        """
        del instance.attributes[self.name]


def attribute(default_value: Any = None):
    """
    Creates a new attribute with a default value.
        This function is a factory that constructs a new attribute derived from a base class, `Attribute`, with an optional default value provided.
        Args:
            default_value (Any, optional): The default value to associate with the attribute.
                This value will be assigned to the attribute if no value is explicitly provided.
                Defaults to None, meaning the attribute will have no default value if not specified.
        Returns:
            A new attribute type with the given default value.
    """
    return new(bases=(Attribute,), default_value=default_value)
